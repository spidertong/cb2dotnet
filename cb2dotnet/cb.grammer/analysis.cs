/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using net.sf.cb2xml.sablecc.node;

namespace net.sf.cb2xml.sablecc.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseARecordDescription(ARecordDescription node);
    void CaseASingleGroupItem(ASingleGroupItem node);
    void CaseASequenceGroupItem(ASequenceGroupItem node);
    void CaseAItemElementaryItem(AItemElementaryItem node);
    void CaseARenamesItemElementaryItem(ARenamesItemElementaryItem node);
    void CaseAValueItemElementaryItem(AValueItemElementaryItem node);
    void CaseAItem(AItem node);
    void CaseADataNameDataNameOrFiller(ADataNameDataNameOrFiller node);
    void CaseAFillerDataNameOrFiller(AFillerDataNameOrFiller node);
    void CaseARedefinesClause(ARedefinesClause node);
    void CaseASingleClauseSequence(ASingleClauseSequence node);
    void CaseASequenceClauseSequence(ASequenceClauseSequence node);
    void CaseABlankWhenZeroClauseClause(ABlankWhenZeroClauseClause node);
    void CaseADateFormatClauseClause(ADateFormatClauseClause node);
    void CaseAExternalClauseClause(AExternalClauseClause node);
    void CaseAGlobalClauseClause(AGlobalClauseClause node);
    void CaseAJustifiedClauseClause(AJustifiedClauseClause node);
    void CaseAOccursClauseClause(AOccursClauseClause node);
    void CaseAPictureClauseClause(APictureClauseClause node);
    void CaseASignClauseClause(ASignClauseClause node);
    void CaseASynchronizedClauseClause(ASynchronizedClauseClause node);
    void CaseAUsageClauseClause(AUsageClauseClause node);
    void CaseAValueClauseClause(AValueClauseClause node);
    void CaseABlankWhenZeroClause(ABlankWhenZeroClause node);
    void CaseADateFormatClause(ADateFormatClause node);
    void CaseAExternalClause(AExternalClause node);
    void CaseAGlobalClause(AGlobalClause node);
    void CaseAJustifiedClause(AJustifiedClause node);
    void CaseAOccursClause(AOccursClause node);
    void CaseAFixedOccursFixedOrVariable(AFixedOccursFixedOrVariable node);
    void CaseAVariableOccursFixedOrVariable(AVariableOccursFixedOrVariable node);
    void CaseAOccursTo(AOccursTo node);
    void CaseAAscendingOrDescendingKeyPhrase(AAscendingOrDescendingKeyPhrase node);
    void CaseAAscendingAscendingOrDescending(AAscendingAscendingOrDescending node);
    void CaseADescendingAscendingOrDescending(ADescendingAscendingOrDescending node);
    void CaseAIndexedByPhrase(AIndexedByPhrase node);
    void CaseAPictureClause(APictureClause node);
    void CaseASignClause(ASignClause node);
    void CaseASignIs(ASignIs node);
    void CaseALeadingLeadingOrTrailing(ALeadingLeadingOrTrailing node);
    void CaseATrailingLeadingOrTrailing(ATrailingLeadingOrTrailing node);
    void CaseASeparateCharacter(ASeparateCharacter node);
    void CaseASynchronizedClause(ASynchronizedClause node);
    void CaseALeftLeftOrRight(ALeftLeftOrRight node);
    void CaseARightLeftOrRight(ARightLeftOrRight node);
    void CaseAUsageClause(AUsageClause node);
    void CaseAUsageIs(AUsageIs node);
    void CaseABinaryUsagePhrase(ABinaryUsagePhrase node);
    void CaseACompUsagePhrase(ACompUsagePhrase node);
    void CaseAComp1UsagePhrase(AComp1UsagePhrase node);
    void CaseAComp2UsagePhrase(AComp2UsagePhrase node);
    void CaseAComp3UsagePhrase(AComp3UsagePhrase node);
    void CaseAComp4UsagePhrase(AComp4UsagePhrase node);
    void CaseAComp5UsagePhrase(AComp5UsagePhrase node);
    void CaseADisplayUsagePhrase(ADisplayUsagePhrase node);
    void CaseADisplay1UsagePhrase(ADisplay1UsagePhrase node);
    void CaseAIndexUsagePhrase(AIndexUsagePhrase node);
    void CaseANationalUsagePhrase(ANationalUsagePhrase node);
    void CaseAObjectReferencePhraseUsagePhrase(AObjectReferencePhraseUsagePhrase node);
    void CaseAPackedDecimalUsagePhrase(APackedDecimalUsagePhrase node);
    void CaseAPointerUsagePhrase(APointerUsagePhrase node);
    void CaseAProcedurePointerUsagePhrase(AProcedurePointerUsagePhrase node);
    void CaseAFunctionPointerUsagePhrase(AFunctionPointerUsagePhrase node);
    void CaseAObjectReferencePhrase(AObjectReferencePhrase node);
    void CaseARenamesItem(ARenamesItem node);
    void CaseAThroughPhrase(AThroughPhrase node);
    void CaseAValueClause(AValueClause node);
    void CaseAValueItem(AValueItem node);
    void CaseAValueValueOrValues(AValueValueOrValues node);
    void CaseAValuesValueOrValues(AValuesValueOrValues node);
    void CaseASingleLiteralSequence(ASingleLiteralSequence node);
    void CaseASequenceLiteralSequence(ASequenceLiteralSequence node);
    void CaseAThroughSingleLiteralSequence(AThroughSingleLiteralSequence node);
    void CaseAThroughSequenceLiteralSequence(AThroughSequenceLiteralSequence node);
    void CaseAZerosLiteral(AZerosLiteral node);
    void CaseASpacesLiteral(ASpacesLiteral node);
    void CaseAHighValuesLiteral(AHighValuesLiteral node);
    void CaseALowValuesLiteral(ALowValuesLiteral node);
    void CaseAQuotesLiteral(AQuotesLiteral node);
    void CaseANullsLiteral(ANullsLiteral node);
    void CaseANumberLiteral(ANumberLiteral node);
    void CaseANumericLiteralLiteral(ANumericLiteralLiteral node);
    void CaseAAlphanumericLiteralLiteral(AAlphanumericLiteralLiteral node);
    void CaseASingleCharacterString(ASingleCharacterString node);
    void CaseASequenceCharacterString(ASequenceCharacterString node);
    void CaseADataNameCharacterSubstring(ADataNameCharacterSubstring node);
    void CaseAPlusCharacterSubstring(APlusCharacterSubstring node);
    void CaseAMinusCharacterSubstring(AMinusCharacterSubstring node);
    void CaseAStarCharacterSubstring(AStarCharacterSubstring node);
    void CaseASlashCharacterSubstring(ASlashCharacterSubstring node);
    void CaseADollarCharacterSubstring(ADollarCharacterSubstring node);
    void CaseACommaCharacterSubstring(ACommaCharacterSubstring node);
    void CaseANumberCharacterSubstring(ANumberCharacterSubstring node);
    void CaseANumericLiteralCharacterSubstring(ANumericLiteralCharacterSubstring node);
    void CaseABracketedNumberCharacterSubstring(ABracketedNumberCharacterSubstring node);
    void CaseADotZeeCharacterSubstring(ADotZeeCharacterSubstring node);
    void CaseABracketedNumber(ABracketedNumber node);
    void CaseANumberNot88Number(ANumberNot88Number node);
    void CaseANumber88Number(ANumber88Number node);

    void CaseTWhiteSpace(TWhiteSpace node);
    void CaseTComment(TComment node);
    void CaseTDot(TDot node);
    void CaseTComma(TComma node);
    void CaseTSlash(TSlash node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTStar(TStar node);
    void CaseTDollar(TDollar node);
    void CaseTLparen(TLparen node);
    void CaseTRparen(TRparen node);
    void CaseTNumber88(TNumber88 node);
    void CaseTNumberNot88(TNumberNot88 node);
    void CaseTAlphanumericLiteral(TAlphanumericLiteral node);
    void CaseTNumericLiteral(TNumericLiteral node);
    void CaseTDotZee(TDotZee node);
    void CaseTAll(TAll node);
    void CaseTAre(TAre node);
    void CaseTAscending(TAscending node);
    void CaseTBinary(TBinary node);
    void CaseTBlank(TBlank node);
    void CaseTBy(TBy node);
    void CaseTCharacter(TCharacter node);
    void CaseTComp(TComp node);
    void CaseTComp1(TComp1 node);
    void CaseTComp2(TComp2 node);
    void CaseTComp3(TComp3 node);
    void CaseTComp4(TComp4 node);
    void CaseTComp5(TComp5 node);
    void CaseTDate(TDate node);
    void CaseTDepending(TDepending node);
    void CaseTDescending(TDescending node);
    void CaseTDisplay(TDisplay node);
    void CaseTDisplay1(TDisplay1 node);
    void CaseTExternal(TExternal node);
    void CaseTFiller(TFiller node);
    void CaseTFormat(TFormat node);
    void CaseTFunctionPointer(TFunctionPointer node);
    void CaseTGlobal(TGlobal node);
    void CaseTHighValues(THighValues node);
    void CaseTIndex(TIndex node);
    void CaseTIndexed(TIndexed node);
    void CaseTIs(TIs node);
    void CaseTJustified(TJustified node);
    void CaseTKey(TKey node);
    void CaseTLeading(TLeading node);
    void CaseTLeft(TLeft node);
    void CaseTLowValues(TLowValues node);
    void CaseTNational(TNational node);
    void CaseTNative(TNative node);
    void CaseTNulls(TNulls node);
    void CaseTObject(TObject node);
    void CaseTOccurs(TOccurs node);
    void CaseTOn(TOn node);
    void CaseTPackedDecimal(TPackedDecimal node);
    void CaseTPicture(TPicture node);
    void CaseTPointer(TPointer node);
    void CaseTProcedurePointer(TProcedurePointer node);
    void CaseTQuotes(TQuotes node);
    void CaseTRedefines(TRedefines node);
    void CaseTReference(TReference node);
    void CaseTRenames(TRenames node);
    void CaseTRight(TRight node);
    void CaseTSeparate(TSeparate node);
    void CaseTSign(TSign node);
    void CaseTSpaces(TSpaces node);
    void CaseTSynchronized(TSynchronized node);
    void CaseTThrough(TThrough node);
    void CaseTTimes(TTimes node);
    void CaseTTo(TTo node);
    void CaseTTrailing(TTrailing node);
    void CaseTUsage(TUsage node);
    void CaseTValue(TValue node);
    void CaseTValues(TValues node);
    void CaseTWhen(TWhen node);
    void CaseTZeros(TZeros node);
    void CaseTDataName(TDataName node);
    void CaseTUnknown(TUnknown node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseARecordDescription(ARecordDescription node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleGroupItem(ASingleGroupItem node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASequenceGroupItem(ASequenceGroupItem node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAItemElementaryItem(AItemElementaryItem node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARenamesItemElementaryItem(ARenamesItemElementaryItem node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAValueItemElementaryItem(AValueItemElementaryItem node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAItem(AItem node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADataNameDataNameOrFiller(ADataNameDataNameOrFiller node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFillerDataNameOrFiller(AFillerDataNameOrFiller node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARedefinesClause(ARedefinesClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleClauseSequence(ASingleClauseSequence node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASequenceClauseSequence(ASequenceClauseSequence node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABlankWhenZeroClauseClause(ABlankWhenZeroClauseClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADateFormatClauseClause(ADateFormatClauseClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExternalClauseClause(AExternalClauseClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGlobalClauseClause(AGlobalClauseClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAJustifiedClauseClause(AJustifiedClauseClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOccursClauseClause(AOccursClauseClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPictureClauseClause(APictureClauseClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASignClauseClause(ASignClauseClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASynchronizedClauseClause(ASynchronizedClauseClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAUsageClauseClause(AUsageClauseClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAValueClauseClause(AValueClauseClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABlankWhenZeroClause(ABlankWhenZeroClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADateFormatClause(ADateFormatClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExternalClause(AExternalClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGlobalClause(AGlobalClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAJustifiedClause(AJustifiedClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOccursClause(AOccursClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFixedOccursFixedOrVariable(AFixedOccursFixedOrVariable node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOccursFixedOrVariable(AVariableOccursFixedOrVariable node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOccursTo(AOccursTo node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAscendingOrDescendingKeyPhrase(AAscendingOrDescendingKeyPhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAscendingAscendingOrDescending(AAscendingAscendingOrDescending node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADescendingAscendingOrDescending(ADescendingAscendingOrDescending node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIndexedByPhrase(AIndexedByPhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPictureClause(APictureClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASignClause(ASignClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASignIs(ASignIs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALeadingLeadingOrTrailing(ALeadingLeadingOrTrailing node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATrailingLeadingOrTrailing(ATrailingLeadingOrTrailing node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASeparateCharacter(ASeparateCharacter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASynchronizedClause(ASynchronizedClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALeftLeftOrRight(ALeftLeftOrRight node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARightLeftOrRight(ARightLeftOrRight node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAUsageClause(AUsageClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAUsageIs(AUsageIs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABinaryUsagePhrase(ABinaryUsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACompUsagePhrase(ACompUsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAComp1UsagePhrase(AComp1UsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAComp2UsagePhrase(AComp2UsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAComp3UsagePhrase(AComp3UsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAComp4UsagePhrase(AComp4UsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAComp5UsagePhrase(AComp5UsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADisplayUsagePhrase(ADisplayUsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADisplay1UsagePhrase(ADisplay1UsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIndexUsagePhrase(AIndexUsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANationalUsagePhrase(ANationalUsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAObjectReferencePhraseUsagePhrase(AObjectReferencePhraseUsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPackedDecimalUsagePhrase(APackedDecimalUsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPointerUsagePhrase(APointerUsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProcedurePointerUsagePhrase(AProcedurePointerUsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionPointerUsagePhrase(AFunctionPointerUsagePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAObjectReferencePhrase(AObjectReferencePhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARenamesItem(ARenamesItem node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThroughPhrase(AThroughPhrase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAValueClause(AValueClause node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAValueItem(AValueItem node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAValueValueOrValues(AValueValueOrValues node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAValuesValueOrValues(AValuesValueOrValues node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleLiteralSequence(ASingleLiteralSequence node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASequenceLiteralSequence(ASequenceLiteralSequence node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThroughSingleLiteralSequence(AThroughSingleLiteralSequence node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThroughSequenceLiteralSequence(AThroughSequenceLiteralSequence node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAZerosLiteral(AZerosLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASpacesLiteral(ASpacesLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAHighValuesLiteral(AHighValuesLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALowValuesLiteral(ALowValuesLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAQuotesLiteral(AQuotesLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANullsLiteral(ANullsLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANumberLiteral(ANumberLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANumericLiteralLiteral(ANumericLiteralLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAlphanumericLiteralLiteral(AAlphanumericLiteralLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleCharacterString(ASingleCharacterString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASequenceCharacterString(ASequenceCharacterString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADataNameCharacterSubstring(ADataNameCharacterSubstring node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlusCharacterSubstring(APlusCharacterSubstring node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMinusCharacterSubstring(AMinusCharacterSubstring node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStarCharacterSubstring(AStarCharacterSubstring node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASlashCharacterSubstring(ASlashCharacterSubstring node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADollarCharacterSubstring(ADollarCharacterSubstring node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACommaCharacterSubstring(ACommaCharacterSubstring node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANumberCharacterSubstring(ANumberCharacterSubstring node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANumericLiteralCharacterSubstring(ANumericLiteralCharacterSubstring node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABracketedNumberCharacterSubstring(ABracketedNumberCharacterSubstring node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADotZeeCharacterSubstring(ADotZeeCharacterSubstring node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABracketedNumber(ABracketedNumber node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANumberNot88Number(ANumberNot88Number node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANumber88Number(ANumber88Number node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTWhiteSpace(TWhiteSpace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDot(TDot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSlash(TSlash node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStar(TStar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDollar(TDollar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLparen(TLparen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRparen(TRparen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNumber88(TNumber88 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNumberNot88(TNumberNot88 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAlphanumericLiteral(TAlphanumericLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNumericLiteral(TNumericLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDotZee(TDotZee node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAll(TAll node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAre(TAre node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAscending(TAscending node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBinary(TBinary node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBy(TBy node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCharacter(TCharacter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComp(TComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComp1(TComp1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComp2(TComp2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComp3(TComp3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComp4(TComp4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComp5(TComp5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDate(TDate node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDepending(TDepending node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDescending(TDescending node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDisplay(TDisplay node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDisplay1(TDisplay1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTExternal(TExternal node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFiller(TFiller node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFormat(TFormat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFunctionPointer(TFunctionPointer node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGlobal(TGlobal node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTHighValues(THighValues node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIndex(TIndex node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIndexed(TIndexed node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIs(TIs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTJustified(TJustified node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKey(TKey node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeading(TLeading node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeft(TLeft node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLowValues(TLowValues node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNational(TNational node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNative(TNative node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNulls(TNulls node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTObject(TObject node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOccurs(TOccurs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOn(TOn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPackedDecimal(TPackedDecimal node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPicture(TPicture node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPointer(TPointer node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTProcedurePointer(TProcedurePointer node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTQuotes(TQuotes node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRedefines(TRedefines node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReference(TReference node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRenames(TRenames node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRight(TRight node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSeparate(TSeparate node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSign(TSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSpaces(TSpaces node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSynchronized(TSynchronized node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTThrough(TThrough node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTimes(TTimes node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTo(TTo node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTrailing(TTrailing node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTUsage(TUsage node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTValue(TValue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTValues(TValues node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhen(TWhen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTZeros(TZeros node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDataName(TDataName node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTUnknown(TUnknown node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPRecordDescription().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InARecordDescription(ARecordDescription node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecordDescription(ARecordDescription node)
    {
        DefaultOut(node);
    }

    public override void CaseARecordDescription(ARecordDescription node)
    {
        InARecordDescription(node);
        if(node.GetGroupItem() != null)
        {
            node.GetGroupItem().Apply(this);
        }
        if(node.GetDot() != null)
        {
            node.GetDot().Apply(this);
        }
        OutARecordDescription(node);
    }
    public virtual void InASingleGroupItem(ASingleGroupItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleGroupItem(ASingleGroupItem node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleGroupItem(ASingleGroupItem node)
    {
        InASingleGroupItem(node);
        if(node.GetElementaryItem() != null)
        {
            node.GetElementaryItem().Apply(this);
        }
        OutASingleGroupItem(node);
    }
    public virtual void InASequenceGroupItem(ASequenceGroupItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutASequenceGroupItem(ASequenceGroupItem node)
    {
        DefaultOut(node);
    }

    public override void CaseASequenceGroupItem(ASequenceGroupItem node)
    {
        InASequenceGroupItem(node);
        if(node.GetGroupItem() != null)
        {
            node.GetGroupItem().Apply(this);
        }
        if(node.GetDot() != null)
        {
            node.GetDot().Apply(this);
        }
        if(node.GetElementaryItem() != null)
        {
            node.GetElementaryItem().Apply(this);
        }
        OutASequenceGroupItem(node);
    }
    public virtual void InAItemElementaryItem(AItemElementaryItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutAItemElementaryItem(AItemElementaryItem node)
    {
        DefaultOut(node);
    }

    public override void CaseAItemElementaryItem(AItemElementaryItem node)
    {
        InAItemElementaryItem(node);
        if(node.GetItem() != null)
        {
            node.GetItem().Apply(this);
        }
        OutAItemElementaryItem(node);
    }
    public virtual void InARenamesItemElementaryItem(ARenamesItemElementaryItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutARenamesItemElementaryItem(ARenamesItemElementaryItem node)
    {
        DefaultOut(node);
    }

    public override void CaseARenamesItemElementaryItem(ARenamesItemElementaryItem node)
    {
        InARenamesItemElementaryItem(node);
        if(node.GetRenamesItem() != null)
        {
            node.GetRenamesItem().Apply(this);
        }
        OutARenamesItemElementaryItem(node);
    }
    public virtual void InAValueItemElementaryItem(AValueItemElementaryItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueItemElementaryItem(AValueItemElementaryItem node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueItemElementaryItem(AValueItemElementaryItem node)
    {
        InAValueItemElementaryItem(node);
        if(node.GetValueItem() != null)
        {
            node.GetValueItem().Apply(this);
        }
        OutAValueItemElementaryItem(node);
    }
    public virtual void InAItem(AItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutAItem(AItem node)
    {
        DefaultOut(node);
    }

    public override void CaseAItem(AItem node)
    {
        InAItem(node);
        if(node.GetNumberNot88() != null)
        {
            node.GetNumberNot88().Apply(this);
        }
        if(node.GetDataNameOrFiller() != null)
        {
            node.GetDataNameOrFiller().Apply(this);
        }
        if(node.GetRedefinesClause() != null)
        {
            node.GetRedefinesClause().Apply(this);
        }
        if(node.GetClauseSequence() != null)
        {
            node.GetClauseSequence().Apply(this);
        }
        OutAItem(node);
    }
    public virtual void InADataNameDataNameOrFiller(ADataNameDataNameOrFiller node)
    {
        DefaultIn(node);
    }

    public virtual void OutADataNameDataNameOrFiller(ADataNameDataNameOrFiller node)
    {
        DefaultOut(node);
    }

    public override void CaseADataNameDataNameOrFiller(ADataNameDataNameOrFiller node)
    {
        InADataNameDataNameOrFiller(node);
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        OutADataNameDataNameOrFiller(node);
    }
    public virtual void InAFillerDataNameOrFiller(AFillerDataNameOrFiller node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFillerDataNameOrFiller(AFillerDataNameOrFiller node)
    {
        DefaultOut(node);
    }

    public override void CaseAFillerDataNameOrFiller(AFillerDataNameOrFiller node)
    {
        InAFillerDataNameOrFiller(node);
        if(node.GetFiller() != null)
        {
            node.GetFiller().Apply(this);
        }
        OutAFillerDataNameOrFiller(node);
    }
    public virtual void InARedefinesClause(ARedefinesClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutARedefinesClause(ARedefinesClause node)
    {
        DefaultOut(node);
    }

    public override void CaseARedefinesClause(ARedefinesClause node)
    {
        InARedefinesClause(node);
        if(node.GetRedefines() != null)
        {
            node.GetRedefines().Apply(this);
        }
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        OutARedefinesClause(node);
    }
    public virtual void InASingleClauseSequence(ASingleClauseSequence node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleClauseSequence(ASingleClauseSequence node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleClauseSequence(ASingleClauseSequence node)
    {
        InASingleClauseSequence(node);
        if(node.GetClause() != null)
        {
            node.GetClause().Apply(this);
        }
        OutASingleClauseSequence(node);
    }
    public virtual void InASequenceClauseSequence(ASequenceClauseSequence node)
    {
        DefaultIn(node);
    }

    public virtual void OutASequenceClauseSequence(ASequenceClauseSequence node)
    {
        DefaultOut(node);
    }

    public override void CaseASequenceClauseSequence(ASequenceClauseSequence node)
    {
        InASequenceClauseSequence(node);
        if(node.GetClauseSequence() != null)
        {
            node.GetClauseSequence().Apply(this);
        }
        if(node.GetClause() != null)
        {
            node.GetClause().Apply(this);
        }
        OutASequenceClauseSequence(node);
    }
    public virtual void InABlankWhenZeroClauseClause(ABlankWhenZeroClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutABlankWhenZeroClauseClause(ABlankWhenZeroClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseABlankWhenZeroClauseClause(ABlankWhenZeroClauseClause node)
    {
        InABlankWhenZeroClauseClause(node);
        if(node.GetBlankWhenZeroClause() != null)
        {
            node.GetBlankWhenZeroClause().Apply(this);
        }
        OutABlankWhenZeroClauseClause(node);
    }
    public virtual void InADateFormatClauseClause(ADateFormatClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutADateFormatClauseClause(ADateFormatClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseADateFormatClauseClause(ADateFormatClauseClause node)
    {
        InADateFormatClauseClause(node);
        if(node.GetDateFormatClause() != null)
        {
            node.GetDateFormatClause().Apply(this);
        }
        OutADateFormatClauseClause(node);
    }
    public virtual void InAExternalClauseClause(AExternalClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExternalClauseClause(AExternalClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAExternalClauseClause(AExternalClauseClause node)
    {
        InAExternalClauseClause(node);
        if(node.GetExternalClause() != null)
        {
            node.GetExternalClause().Apply(this);
        }
        OutAExternalClauseClause(node);
    }
    public virtual void InAGlobalClauseClause(AGlobalClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGlobalClauseClause(AGlobalClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAGlobalClauseClause(AGlobalClauseClause node)
    {
        InAGlobalClauseClause(node);
        if(node.GetGlobalClause() != null)
        {
            node.GetGlobalClause().Apply(this);
        }
        OutAGlobalClauseClause(node);
    }
    public virtual void InAJustifiedClauseClause(AJustifiedClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAJustifiedClauseClause(AJustifiedClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAJustifiedClauseClause(AJustifiedClauseClause node)
    {
        InAJustifiedClauseClause(node);
        if(node.GetJustifiedClause() != null)
        {
            node.GetJustifiedClause().Apply(this);
        }
        OutAJustifiedClauseClause(node);
    }
    public virtual void InAOccursClauseClause(AOccursClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOccursClauseClause(AOccursClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAOccursClauseClause(AOccursClauseClause node)
    {
        InAOccursClauseClause(node);
        if(node.GetOccursClause() != null)
        {
            node.GetOccursClause().Apply(this);
        }
        OutAOccursClauseClause(node);
    }
    public virtual void InAPictureClauseClause(APictureClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPictureClauseClause(APictureClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAPictureClauseClause(APictureClauseClause node)
    {
        InAPictureClauseClause(node);
        if(node.GetPictureClause() != null)
        {
            node.GetPictureClause().Apply(this);
        }
        OutAPictureClauseClause(node);
    }
    public virtual void InASignClauseClause(ASignClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutASignClauseClause(ASignClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseASignClauseClause(ASignClauseClause node)
    {
        InASignClauseClause(node);
        if(node.GetSignClause() != null)
        {
            node.GetSignClause().Apply(this);
        }
        OutASignClauseClause(node);
    }
    public virtual void InASynchronizedClauseClause(ASynchronizedClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutASynchronizedClauseClause(ASynchronizedClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseASynchronizedClauseClause(ASynchronizedClauseClause node)
    {
        InASynchronizedClauseClause(node);
        if(node.GetSynchronizedClause() != null)
        {
            node.GetSynchronizedClause().Apply(this);
        }
        OutASynchronizedClauseClause(node);
    }
    public virtual void InAUsageClauseClause(AUsageClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUsageClauseClause(AUsageClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAUsageClauseClause(AUsageClauseClause node)
    {
        InAUsageClauseClause(node);
        if(node.GetUsageClause() != null)
        {
            node.GetUsageClause().Apply(this);
        }
        OutAUsageClauseClause(node);
    }
    public virtual void InAValueClauseClause(AValueClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueClauseClause(AValueClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueClauseClause(AValueClauseClause node)
    {
        InAValueClauseClause(node);
        if(node.GetValueClause() != null)
        {
            node.GetValueClause().Apply(this);
        }
        OutAValueClauseClause(node);
    }
    public virtual void InABlankWhenZeroClause(ABlankWhenZeroClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutABlankWhenZeroClause(ABlankWhenZeroClause node)
    {
        DefaultOut(node);
    }

    public override void CaseABlankWhenZeroClause(ABlankWhenZeroClause node)
    {
        InABlankWhenZeroClause(node);
        if(node.GetBlank() != null)
        {
            node.GetBlank().Apply(this);
        }
        if(node.GetWhen() != null)
        {
            node.GetWhen().Apply(this);
        }
        if(node.GetZeros() != null)
        {
            node.GetZeros().Apply(this);
        }
        OutABlankWhenZeroClause(node);
    }
    public virtual void InADateFormatClause(ADateFormatClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutADateFormatClause(ADateFormatClause node)
    {
        DefaultOut(node);
    }

    public override void CaseADateFormatClause(ADateFormatClause node)
    {
        InADateFormatClause(node);
        if(node.GetDate() != null)
        {
            node.GetDate().Apply(this);
        }
        if(node.GetFormat() != null)
        {
            node.GetFormat().Apply(this);
        }
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        OutADateFormatClause(node);
    }
    public virtual void InAExternalClause(AExternalClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExternalClause(AExternalClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAExternalClause(AExternalClause node)
    {
        InAExternalClause(node);
        if(node.GetExternal() != null)
        {
            node.GetExternal().Apply(this);
        }
        OutAExternalClause(node);
    }
    public virtual void InAGlobalClause(AGlobalClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGlobalClause(AGlobalClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAGlobalClause(AGlobalClause node)
    {
        InAGlobalClause(node);
        if(node.GetGlobal() != null)
        {
            node.GetGlobal().Apply(this);
        }
        OutAGlobalClause(node);
    }
    public virtual void InAJustifiedClause(AJustifiedClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAJustifiedClause(AJustifiedClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAJustifiedClause(AJustifiedClause node)
    {
        InAJustifiedClause(node);
        if(node.GetJustified() != null)
        {
            node.GetJustified().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutAJustifiedClause(node);
    }
    public virtual void InAOccursClause(AOccursClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOccursClause(AOccursClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAOccursClause(AOccursClause node)
    {
        InAOccursClause(node);
        if(node.GetOccursFixedOrVariable() != null)
        {
            node.GetOccursFixedOrVariable().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetAscendingOrDescendingKeyPhrase().Count];
            node.GetAscendingOrDescendingKeyPhrase().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PAscendingOrDescendingKeyPhrase) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetIndexedByPhrase().Count];
            node.GetIndexedByPhrase().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PIndexedByPhrase) temp[i]).Apply(this);
            }
        }
        OutAOccursClause(node);
    }
    public virtual void InAFixedOccursFixedOrVariable(AFixedOccursFixedOrVariable node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFixedOccursFixedOrVariable(AFixedOccursFixedOrVariable node)
    {
        DefaultOut(node);
    }

    public override void CaseAFixedOccursFixedOrVariable(AFixedOccursFixedOrVariable node)
    {
        InAFixedOccursFixedOrVariable(node);
        if(node.GetOccurs() != null)
        {
            node.GetOccurs().Apply(this);
        }
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        if(node.GetTimes() != null)
        {
            node.GetTimes().Apply(this);
        }
        OutAFixedOccursFixedOrVariable(node);
    }
    public virtual void InAVariableOccursFixedOrVariable(AVariableOccursFixedOrVariable node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOccursFixedOrVariable(AVariableOccursFixedOrVariable node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOccursFixedOrVariable(AVariableOccursFixedOrVariable node)
    {
        InAVariableOccursFixedOrVariable(node);
        if(node.GetOccurs() != null)
        {
            node.GetOccurs().Apply(this);
        }
        if(node.GetOccursTo() != null)
        {
            node.GetOccursTo().Apply(this);
        }
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        if(node.GetTimes() != null)
        {
            node.GetTimes().Apply(this);
        }
        if(node.GetDepending() != null)
        {
            node.GetDepending().Apply(this);
        }
        if(node.GetOn() != null)
        {
            node.GetOn().Apply(this);
        }
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        OutAVariableOccursFixedOrVariable(node);
    }
    public virtual void InAOccursTo(AOccursTo node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOccursTo(AOccursTo node)
    {
        DefaultOut(node);
    }

    public override void CaseAOccursTo(AOccursTo node)
    {
        InAOccursTo(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        if(node.GetTo() != null)
        {
            node.GetTo().Apply(this);
        }
        OutAOccursTo(node);
    }
    public virtual void InAAscendingOrDescendingKeyPhrase(AAscendingOrDescendingKeyPhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAscendingOrDescendingKeyPhrase(AAscendingOrDescendingKeyPhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAAscendingOrDescendingKeyPhrase(AAscendingOrDescendingKeyPhrase node)
    {
        InAAscendingOrDescendingKeyPhrase(node);
        if(node.GetAscendingOrDescending() != null)
        {
            node.GetAscendingOrDescending().Apply(this);
        }
        if(node.GetKey() != null)
        {
            node.GetKey().Apply(this);
        }
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetDataName().Count];
            node.GetDataName().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((TDataName) temp[i]).Apply(this);
            }
        }
        OutAAscendingOrDescendingKeyPhrase(node);
    }
    public virtual void InAAscendingAscendingOrDescending(AAscendingAscendingOrDescending node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAscendingAscendingOrDescending(AAscendingAscendingOrDescending node)
    {
        DefaultOut(node);
    }

    public override void CaseAAscendingAscendingOrDescending(AAscendingAscendingOrDescending node)
    {
        InAAscendingAscendingOrDescending(node);
        if(node.GetAscending() != null)
        {
            node.GetAscending().Apply(this);
        }
        OutAAscendingAscendingOrDescending(node);
    }
    public virtual void InADescendingAscendingOrDescending(ADescendingAscendingOrDescending node)
    {
        DefaultIn(node);
    }

    public virtual void OutADescendingAscendingOrDescending(ADescendingAscendingOrDescending node)
    {
        DefaultOut(node);
    }

    public override void CaseADescendingAscendingOrDescending(ADescendingAscendingOrDescending node)
    {
        InADescendingAscendingOrDescending(node);
        if(node.GetDescending() != null)
        {
            node.GetDescending().Apply(this);
        }
        OutADescendingAscendingOrDescending(node);
    }
    public virtual void InAIndexedByPhrase(AIndexedByPhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIndexedByPhrase(AIndexedByPhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAIndexedByPhrase(AIndexedByPhrase node)
    {
        InAIndexedByPhrase(node);
        if(node.GetIndexed() != null)
        {
            node.GetIndexed().Apply(this);
        }
        if(node.GetBy() != null)
        {
            node.GetBy().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetDataName().Count];
            node.GetDataName().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((TDataName) temp[i]).Apply(this);
            }
        }
        OutAIndexedByPhrase(node);
    }
    public virtual void InAPictureClause(APictureClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPictureClause(APictureClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAPictureClause(APictureClause node)
    {
        InAPictureClause(node);
        if(node.GetPicture() != null)
        {
            node.GetPicture().Apply(this);
        }
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        if(node.GetCharacterString() != null)
        {
            node.GetCharacterString().Apply(this);
        }
        OutAPictureClause(node);
    }
    public virtual void InASignClause(ASignClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutASignClause(ASignClause node)
    {
        DefaultOut(node);
    }

    public override void CaseASignClause(ASignClause node)
    {
        InASignClause(node);
        if(node.GetSignIs() != null)
        {
            node.GetSignIs().Apply(this);
        }
        if(node.GetLeadingOrTrailing() != null)
        {
            node.GetLeadingOrTrailing().Apply(this);
        }
        if(node.GetSeparateCharacter() != null)
        {
            node.GetSeparateCharacter().Apply(this);
        }
        OutASignClause(node);
    }
    public virtual void InASignIs(ASignIs node)
    {
        DefaultIn(node);
    }

    public virtual void OutASignIs(ASignIs node)
    {
        DefaultOut(node);
    }

    public override void CaseASignIs(ASignIs node)
    {
        InASignIs(node);
        if(node.GetSign() != null)
        {
            node.GetSign().Apply(this);
        }
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        OutASignIs(node);
    }
    public virtual void InALeadingLeadingOrTrailing(ALeadingLeadingOrTrailing node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeadingLeadingOrTrailing(ALeadingLeadingOrTrailing node)
    {
        DefaultOut(node);
    }

    public override void CaseALeadingLeadingOrTrailing(ALeadingLeadingOrTrailing node)
    {
        InALeadingLeadingOrTrailing(node);
        if(node.GetLeading() != null)
        {
            node.GetLeading().Apply(this);
        }
        OutALeadingLeadingOrTrailing(node);
    }
    public virtual void InATrailingLeadingOrTrailing(ATrailingLeadingOrTrailing node)
    {
        DefaultIn(node);
    }

    public virtual void OutATrailingLeadingOrTrailing(ATrailingLeadingOrTrailing node)
    {
        DefaultOut(node);
    }

    public override void CaseATrailingLeadingOrTrailing(ATrailingLeadingOrTrailing node)
    {
        InATrailingLeadingOrTrailing(node);
        if(node.GetTrailing() != null)
        {
            node.GetTrailing().Apply(this);
        }
        OutATrailingLeadingOrTrailing(node);
    }
    public virtual void InASeparateCharacter(ASeparateCharacter node)
    {
        DefaultIn(node);
    }

    public virtual void OutASeparateCharacter(ASeparateCharacter node)
    {
        DefaultOut(node);
    }

    public override void CaseASeparateCharacter(ASeparateCharacter node)
    {
        InASeparateCharacter(node);
        if(node.GetSeparate() != null)
        {
            node.GetSeparate().Apply(this);
        }
        if(node.GetCharacter() != null)
        {
            node.GetCharacter().Apply(this);
        }
        OutASeparateCharacter(node);
    }
    public virtual void InASynchronizedClause(ASynchronizedClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutASynchronizedClause(ASynchronizedClause node)
    {
        DefaultOut(node);
    }

    public override void CaseASynchronizedClause(ASynchronizedClause node)
    {
        InASynchronizedClause(node);
        if(node.GetSynchronized() != null)
        {
            node.GetSynchronized().Apply(this);
        }
        if(node.GetLeftOrRight() != null)
        {
            node.GetLeftOrRight().Apply(this);
        }
        OutASynchronizedClause(node);
    }
    public virtual void InALeftLeftOrRight(ALeftLeftOrRight node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeftLeftOrRight(ALeftLeftOrRight node)
    {
        DefaultOut(node);
    }

    public override void CaseALeftLeftOrRight(ALeftLeftOrRight node)
    {
        InALeftLeftOrRight(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutALeftLeftOrRight(node);
    }
    public virtual void InARightLeftOrRight(ARightLeftOrRight node)
    {
        DefaultIn(node);
    }

    public virtual void OutARightLeftOrRight(ARightLeftOrRight node)
    {
        DefaultOut(node);
    }

    public override void CaseARightLeftOrRight(ARightLeftOrRight node)
    {
        InARightLeftOrRight(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutARightLeftOrRight(node);
    }
    public virtual void InAUsageClause(AUsageClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUsageClause(AUsageClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAUsageClause(AUsageClause node)
    {
        InAUsageClause(node);
        if(node.GetUsageIs() != null)
        {
            node.GetUsageIs().Apply(this);
        }
        if(node.GetUsagePhrase() != null)
        {
            node.GetUsagePhrase().Apply(this);
        }
        OutAUsageClause(node);
    }
    public virtual void InAUsageIs(AUsageIs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUsageIs(AUsageIs node)
    {
        DefaultOut(node);
    }

    public override void CaseAUsageIs(AUsageIs node)
    {
        InAUsageIs(node);
        if(node.GetUsage() != null)
        {
            node.GetUsage().Apply(this);
        }
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        OutAUsageIs(node);
    }
    public virtual void InABinaryUsagePhrase(ABinaryUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutABinaryUsagePhrase(ABinaryUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseABinaryUsagePhrase(ABinaryUsagePhrase node)
    {
        InABinaryUsagePhrase(node);
        if(node.GetBinary() != null)
        {
            node.GetBinary().Apply(this);
        }
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        OutABinaryUsagePhrase(node);
    }
    public virtual void InACompUsagePhrase(ACompUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompUsagePhrase(ACompUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseACompUsagePhrase(ACompUsagePhrase node)
    {
        InACompUsagePhrase(node);
        if(node.GetComp() != null)
        {
            node.GetComp().Apply(this);
        }
        OutACompUsagePhrase(node);
    }
    public virtual void InAComp1UsagePhrase(AComp1UsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComp1UsagePhrase(AComp1UsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAComp1UsagePhrase(AComp1UsagePhrase node)
    {
        InAComp1UsagePhrase(node);
        if(node.GetComp1() != null)
        {
            node.GetComp1().Apply(this);
        }
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        OutAComp1UsagePhrase(node);
    }
    public virtual void InAComp2UsagePhrase(AComp2UsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComp2UsagePhrase(AComp2UsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAComp2UsagePhrase(AComp2UsagePhrase node)
    {
        InAComp2UsagePhrase(node);
        if(node.GetComp2() != null)
        {
            node.GetComp2().Apply(this);
        }
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        OutAComp2UsagePhrase(node);
    }
    public virtual void InAComp3UsagePhrase(AComp3UsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComp3UsagePhrase(AComp3UsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAComp3UsagePhrase(AComp3UsagePhrase node)
    {
        InAComp3UsagePhrase(node);
        if(node.GetComp3() != null)
        {
            node.GetComp3().Apply(this);
        }
        OutAComp3UsagePhrase(node);
    }
    public virtual void InAComp4UsagePhrase(AComp4UsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComp4UsagePhrase(AComp4UsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAComp4UsagePhrase(AComp4UsagePhrase node)
    {
        InAComp4UsagePhrase(node);
        if(node.GetComp4() != null)
        {
            node.GetComp4().Apply(this);
        }
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        OutAComp4UsagePhrase(node);
    }
    public virtual void InAComp5UsagePhrase(AComp5UsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComp5UsagePhrase(AComp5UsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAComp5UsagePhrase(AComp5UsagePhrase node)
    {
        InAComp5UsagePhrase(node);
        if(node.GetComp5() != null)
        {
            node.GetComp5().Apply(this);
        }
        OutAComp5UsagePhrase(node);
    }
    public virtual void InADisplayUsagePhrase(ADisplayUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutADisplayUsagePhrase(ADisplayUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseADisplayUsagePhrase(ADisplayUsagePhrase node)
    {
        InADisplayUsagePhrase(node);
        if(node.GetDisplay() != null)
        {
            node.GetDisplay().Apply(this);
        }
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        OutADisplayUsagePhrase(node);
    }
    public virtual void InADisplay1UsagePhrase(ADisplay1UsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutADisplay1UsagePhrase(ADisplay1UsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseADisplay1UsagePhrase(ADisplay1UsagePhrase node)
    {
        InADisplay1UsagePhrase(node);
        if(node.GetDisplay1() != null)
        {
            node.GetDisplay1().Apply(this);
        }
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        OutADisplay1UsagePhrase(node);
    }
    public virtual void InAIndexUsagePhrase(AIndexUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIndexUsagePhrase(AIndexUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAIndexUsagePhrase(AIndexUsagePhrase node)
    {
        InAIndexUsagePhrase(node);
        if(node.GetIndex() != null)
        {
            node.GetIndex().Apply(this);
        }
        OutAIndexUsagePhrase(node);
    }
    public virtual void InANationalUsagePhrase(ANationalUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutANationalUsagePhrase(ANationalUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseANationalUsagePhrase(ANationalUsagePhrase node)
    {
        InANationalUsagePhrase(node);
        if(node.GetNational() != null)
        {
            node.GetNational().Apply(this);
        }
        OutANationalUsagePhrase(node);
    }
    public virtual void InAObjectReferencePhraseUsagePhrase(AObjectReferencePhraseUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAObjectReferencePhraseUsagePhrase(AObjectReferencePhraseUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAObjectReferencePhraseUsagePhrase(AObjectReferencePhraseUsagePhrase node)
    {
        InAObjectReferencePhraseUsagePhrase(node);
        if(node.GetObjectReferencePhrase() != null)
        {
            node.GetObjectReferencePhrase().Apply(this);
        }
        OutAObjectReferencePhraseUsagePhrase(node);
    }
    public virtual void InAPackedDecimalUsagePhrase(APackedDecimalUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPackedDecimalUsagePhrase(APackedDecimalUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAPackedDecimalUsagePhrase(APackedDecimalUsagePhrase node)
    {
        InAPackedDecimalUsagePhrase(node);
        if(node.GetPackedDecimal() != null)
        {
            node.GetPackedDecimal().Apply(this);
        }
        OutAPackedDecimalUsagePhrase(node);
    }
    public virtual void InAPointerUsagePhrase(APointerUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPointerUsagePhrase(APointerUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAPointerUsagePhrase(APointerUsagePhrase node)
    {
        InAPointerUsagePhrase(node);
        if(node.GetPointer() != null)
        {
            node.GetPointer().Apply(this);
        }
        OutAPointerUsagePhrase(node);
    }
    public virtual void InAProcedurePointerUsagePhrase(AProcedurePointerUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedurePointerUsagePhrase(AProcedurePointerUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedurePointerUsagePhrase(AProcedurePointerUsagePhrase node)
    {
        InAProcedurePointerUsagePhrase(node);
        if(node.GetProcedurePointer() != null)
        {
            node.GetProcedurePointer().Apply(this);
        }
        OutAProcedurePointerUsagePhrase(node);
    }
    public virtual void InAFunctionPointerUsagePhrase(AFunctionPointerUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionPointerUsagePhrase(AFunctionPointerUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionPointerUsagePhrase(AFunctionPointerUsagePhrase node)
    {
        InAFunctionPointerUsagePhrase(node);
        if(node.GetFunctionPointer() != null)
        {
            node.GetFunctionPointer().Apply(this);
        }
        OutAFunctionPointerUsagePhrase(node);
    }
    public virtual void InAObjectReferencePhrase(AObjectReferencePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAObjectReferencePhrase(AObjectReferencePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAObjectReferencePhrase(AObjectReferencePhrase node)
    {
        InAObjectReferencePhrase(node);
        if(node.GetObject() != null)
        {
            node.GetObject().Apply(this);
        }
        if(node.GetReference() != null)
        {
            node.GetReference().Apply(this);
        }
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        OutAObjectReferencePhrase(node);
    }
    public virtual void InARenamesItem(ARenamesItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutARenamesItem(ARenamesItem node)
    {
        DefaultOut(node);
    }

    public override void CaseARenamesItem(ARenamesItem node)
    {
        InARenamesItem(node);
        if(node.GetNumberNot88() != null)
        {
            node.GetNumberNot88().Apply(this);
        }
        if(node.GetRenameTo() != null)
        {
            node.GetRenameTo().Apply(this);
        }
        if(node.GetRenames() != null)
        {
            node.GetRenames().Apply(this);
        }
        if(node.GetRenameFrom() != null)
        {
            node.GetRenameFrom().Apply(this);
        }
        if(node.GetThroughPhrase() != null)
        {
            node.GetThroughPhrase().Apply(this);
        }
        OutARenamesItem(node);
    }
    public virtual void InAThroughPhrase(AThroughPhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThroughPhrase(AThroughPhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAThroughPhrase(AThroughPhrase node)
    {
        InAThroughPhrase(node);
        if(node.GetThrough() != null)
        {
            node.GetThrough().Apply(this);
        }
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        OutAThroughPhrase(node);
    }
    public virtual void InAValueClause(AValueClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueClause(AValueClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueClause(AValueClause node)
    {
        InAValueClause(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        if(node.GetAll() != null)
        {
            node.GetAll().Apply(this);
        }
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        OutAValueClause(node);
    }
    public virtual void InAValueItem(AValueItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueItem(AValueItem node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueItem(AValueItem node)
    {
        InAValueItem(node);
        if(node.GetNumber88() != null)
        {
            node.GetNumber88().Apply(this);
        }
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        if(node.GetValueOrValues() != null)
        {
            node.GetValueOrValues().Apply(this);
        }
        if(node.GetLiteralSequence() != null)
        {
            node.GetLiteralSequence().Apply(this);
        }
        OutAValueItem(node);
    }
    public virtual void InAValueValueOrValues(AValueValueOrValues node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueValueOrValues(AValueValueOrValues node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueValueOrValues(AValueValueOrValues node)
    {
        InAValueValueOrValues(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        OutAValueValueOrValues(node);
    }
    public virtual void InAValuesValueOrValues(AValuesValueOrValues node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValuesValueOrValues(AValuesValueOrValues node)
    {
        DefaultOut(node);
    }

    public override void CaseAValuesValueOrValues(AValuesValueOrValues node)
    {
        InAValuesValueOrValues(node);
        if(node.GetValues() != null)
        {
            node.GetValues().Apply(this);
        }
        if(node.GetAre() != null)
        {
            node.GetAre().Apply(this);
        }
        OutAValuesValueOrValues(node);
    }
    public virtual void InASingleLiteralSequence(ASingleLiteralSequence node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleLiteralSequence(ASingleLiteralSequence node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleLiteralSequence(ASingleLiteralSequence node)
    {
        InASingleLiteralSequence(node);
        if(node.GetAll() != null)
        {
            node.GetAll().Apply(this);
        }
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        OutASingleLiteralSequence(node);
    }
    public virtual void InASequenceLiteralSequence(ASequenceLiteralSequence node)
    {
        DefaultIn(node);
    }

    public virtual void OutASequenceLiteralSequence(ASequenceLiteralSequence node)
    {
        DefaultOut(node);
    }

    public override void CaseASequenceLiteralSequence(ASequenceLiteralSequence node)
    {
        InASequenceLiteralSequence(node);
        if(node.GetLiteralSequence() != null)
        {
            node.GetLiteralSequence().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        OutASequenceLiteralSequence(node);
    }
    public virtual void InAThroughSingleLiteralSequence(AThroughSingleLiteralSequence node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThroughSingleLiteralSequence(AThroughSingleLiteralSequence node)
    {
        DefaultOut(node);
    }

    public override void CaseAThroughSingleLiteralSequence(AThroughSingleLiteralSequence node)
    {
        InAThroughSingleLiteralSequence(node);
        if(node.GetFrom() != null)
        {
            node.GetFrom().Apply(this);
        }
        if(node.GetThrough() != null)
        {
            node.GetThrough().Apply(this);
        }
        if(node.GetTo() != null)
        {
            node.GetTo().Apply(this);
        }
        OutAThroughSingleLiteralSequence(node);
    }
    public virtual void InAThroughSequenceLiteralSequence(AThroughSequenceLiteralSequence node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThroughSequenceLiteralSequence(AThroughSequenceLiteralSequence node)
    {
        DefaultOut(node);
    }

    public override void CaseAThroughSequenceLiteralSequence(AThroughSequenceLiteralSequence node)
    {
        InAThroughSequenceLiteralSequence(node);
        if(node.GetLiteralSequence() != null)
        {
            node.GetLiteralSequence().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFrom() != null)
        {
            node.GetFrom().Apply(this);
        }
        if(node.GetThrough() != null)
        {
            node.GetThrough().Apply(this);
        }
        if(node.GetTo() != null)
        {
            node.GetTo().Apply(this);
        }
        OutAThroughSequenceLiteralSequence(node);
    }
    public virtual void InAZerosLiteral(AZerosLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAZerosLiteral(AZerosLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAZerosLiteral(AZerosLiteral node)
    {
        InAZerosLiteral(node);
        if(node.GetZeros() != null)
        {
            node.GetZeros().Apply(this);
        }
        OutAZerosLiteral(node);
    }
    public virtual void InASpacesLiteral(ASpacesLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutASpacesLiteral(ASpacesLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseASpacesLiteral(ASpacesLiteral node)
    {
        InASpacesLiteral(node);
        if(node.GetSpaces() != null)
        {
            node.GetSpaces().Apply(this);
        }
        OutASpacesLiteral(node);
    }
    public virtual void InAHighValuesLiteral(AHighValuesLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHighValuesLiteral(AHighValuesLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAHighValuesLiteral(AHighValuesLiteral node)
    {
        InAHighValuesLiteral(node);
        if(node.GetHighValues() != null)
        {
            node.GetHighValues().Apply(this);
        }
        OutAHighValuesLiteral(node);
    }
    public virtual void InALowValuesLiteral(ALowValuesLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutALowValuesLiteral(ALowValuesLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseALowValuesLiteral(ALowValuesLiteral node)
    {
        InALowValuesLiteral(node);
        if(node.GetLowValues() != null)
        {
            node.GetLowValues().Apply(this);
        }
        OutALowValuesLiteral(node);
    }
    public virtual void InAQuotesLiteral(AQuotesLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAQuotesLiteral(AQuotesLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAQuotesLiteral(AQuotesLiteral node)
    {
        InAQuotesLiteral(node);
        if(node.GetQuotes() != null)
        {
            node.GetQuotes().Apply(this);
        }
        OutAQuotesLiteral(node);
    }
    public virtual void InANullsLiteral(ANullsLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutANullsLiteral(ANullsLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseANullsLiteral(ANullsLiteral node)
    {
        InANullsLiteral(node);
        if(node.GetNulls() != null)
        {
            node.GetNulls().Apply(this);
        }
        OutANullsLiteral(node);
    }
    public virtual void InANumberLiteral(ANumberLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberLiteral(ANumberLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberLiteral(ANumberLiteral node)
    {
        InANumberLiteral(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutANumberLiteral(node);
    }
    public virtual void InANumericLiteralLiteral(ANumericLiteralLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumericLiteralLiteral(ANumericLiteralLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseANumericLiteralLiteral(ANumericLiteralLiteral node)
    {
        InANumericLiteralLiteral(node);
        if(node.GetNumericLiteral() != null)
        {
            node.GetNumericLiteral().Apply(this);
        }
        OutANumericLiteralLiteral(node);
    }
    public virtual void InAAlphanumericLiteralLiteral(AAlphanumericLiteralLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAlphanumericLiteralLiteral(AAlphanumericLiteralLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAAlphanumericLiteralLiteral(AAlphanumericLiteralLiteral node)
    {
        InAAlphanumericLiteralLiteral(node);
        if(node.GetAlphanumericLiteral() != null)
        {
            node.GetAlphanumericLiteral().Apply(this);
        }
        OutAAlphanumericLiteralLiteral(node);
    }
    public virtual void InASingleCharacterString(ASingleCharacterString node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleCharacterString(ASingleCharacterString node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleCharacterString(ASingleCharacterString node)
    {
        InASingleCharacterString(node);
        if(node.GetCharacterSubstring() != null)
        {
            node.GetCharacterSubstring().Apply(this);
        }
        OutASingleCharacterString(node);
    }
    public virtual void InASequenceCharacterString(ASequenceCharacterString node)
    {
        DefaultIn(node);
    }

    public virtual void OutASequenceCharacterString(ASequenceCharacterString node)
    {
        DefaultOut(node);
    }

    public override void CaseASequenceCharacterString(ASequenceCharacterString node)
    {
        InASequenceCharacterString(node);
        if(node.GetCharacterString() != null)
        {
            node.GetCharacterString().Apply(this);
        }
        if(node.GetCharacterSubstring() != null)
        {
            node.GetCharacterSubstring().Apply(this);
        }
        OutASequenceCharacterString(node);
    }
    public virtual void InADataNameCharacterSubstring(ADataNameCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutADataNameCharacterSubstring(ADataNameCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseADataNameCharacterSubstring(ADataNameCharacterSubstring node)
    {
        InADataNameCharacterSubstring(node);
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        OutADataNameCharacterSubstring(node);
    }
    public virtual void InAPlusCharacterSubstring(APlusCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusCharacterSubstring(APlusCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusCharacterSubstring(APlusCharacterSubstring node)
    {
        InAPlusCharacterSubstring(node);
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        OutAPlusCharacterSubstring(node);
    }
    public virtual void InAMinusCharacterSubstring(AMinusCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusCharacterSubstring(AMinusCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusCharacterSubstring(AMinusCharacterSubstring node)
    {
        InAMinusCharacterSubstring(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutAMinusCharacterSubstring(node);
    }
    public virtual void InAStarCharacterSubstring(AStarCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStarCharacterSubstring(AStarCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseAStarCharacterSubstring(AStarCharacterSubstring node)
    {
        InAStarCharacterSubstring(node);
        if(node.GetStar() != null)
        {
            node.GetStar().Apply(this);
        }
        OutAStarCharacterSubstring(node);
    }
    public virtual void InASlashCharacterSubstring(ASlashCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutASlashCharacterSubstring(ASlashCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseASlashCharacterSubstring(ASlashCharacterSubstring node)
    {
        InASlashCharacterSubstring(node);
        if(node.GetSlash() != null)
        {
            node.GetSlash().Apply(this);
        }
        OutASlashCharacterSubstring(node);
    }
    public virtual void InADollarCharacterSubstring(ADollarCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutADollarCharacterSubstring(ADollarCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseADollarCharacterSubstring(ADollarCharacterSubstring node)
    {
        InADollarCharacterSubstring(node);
        if(node.GetDollar() != null)
        {
            node.GetDollar().Apply(this);
        }
        OutADollarCharacterSubstring(node);
    }
    public virtual void InACommaCharacterSubstring(ACommaCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutACommaCharacterSubstring(ACommaCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseACommaCharacterSubstring(ACommaCharacterSubstring node)
    {
        InACommaCharacterSubstring(node);
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        OutACommaCharacterSubstring(node);
    }
    public virtual void InANumberCharacterSubstring(ANumberCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberCharacterSubstring(ANumberCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberCharacterSubstring(ANumberCharacterSubstring node)
    {
        InANumberCharacterSubstring(node);
        if(node.GetNumberNot88() != null)
        {
            node.GetNumberNot88().Apply(this);
        }
        OutANumberCharacterSubstring(node);
    }
    public virtual void InANumericLiteralCharacterSubstring(ANumericLiteralCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumericLiteralCharacterSubstring(ANumericLiteralCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseANumericLiteralCharacterSubstring(ANumericLiteralCharacterSubstring node)
    {
        InANumericLiteralCharacterSubstring(node);
        if(node.GetNumericLiteral() != null)
        {
            node.GetNumericLiteral().Apply(this);
        }
        OutANumericLiteralCharacterSubstring(node);
    }
    public virtual void InABracketedNumberCharacterSubstring(ABracketedNumberCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutABracketedNumberCharacterSubstring(ABracketedNumberCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseABracketedNumberCharacterSubstring(ABracketedNumberCharacterSubstring node)
    {
        InABracketedNumberCharacterSubstring(node);
        if(node.GetBracketedNumber() != null)
        {
            node.GetBracketedNumber().Apply(this);
        }
        OutABracketedNumberCharacterSubstring(node);
    }
    public virtual void InADotZeeCharacterSubstring(ADotZeeCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutADotZeeCharacterSubstring(ADotZeeCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseADotZeeCharacterSubstring(ADotZeeCharacterSubstring node)
    {
        InADotZeeCharacterSubstring(node);
        if(node.GetDotZee() != null)
        {
            node.GetDotZee().Apply(this);
        }
        OutADotZeeCharacterSubstring(node);
    }
    public virtual void InABracketedNumber(ABracketedNumber node)
    {
        DefaultIn(node);
    }

    public virtual void OutABracketedNumber(ABracketedNumber node)
    {
        DefaultOut(node);
    }

    public override void CaseABracketedNumber(ABracketedNumber node)
    {
        InABracketedNumber(node);
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        OutABracketedNumber(node);
    }
    public virtual void InANumberNot88Number(ANumberNot88Number node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberNot88Number(ANumberNot88Number node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberNot88Number(ANumberNot88Number node)
    {
        InANumberNot88Number(node);
        if(node.GetNumberNot88() != null)
        {
            node.GetNumberNot88().Apply(this);
        }
        OutANumberNot88Number(node);
    }
    public virtual void InANumber88Number(ANumber88Number node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumber88Number(ANumber88Number node)
    {
        DefaultOut(node);
    }

    public override void CaseANumber88Number(ANumber88Number node)
    {
        InANumber88Number(node);
        if(node.GetNumber88() != null)
        {
            node.GetNumber88().Apply(this);
        }
        OutANumber88Number(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPRecordDescription().Apply(this);
        OutStart(node);
    }

    public virtual void InARecordDescription(ARecordDescription node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecordDescription(ARecordDescription node)
    {
        DefaultOut(node);
    }

    public override void CaseARecordDescription(ARecordDescription node)
    {
        InARecordDescription(node);
        if(node.GetDot() != null)
        {
            node.GetDot().Apply(this);
        }
        if(node.GetGroupItem() != null)
        {
            node.GetGroupItem().Apply(this);
        }
        OutARecordDescription(node);
    }
    public virtual void InASingleGroupItem(ASingleGroupItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleGroupItem(ASingleGroupItem node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleGroupItem(ASingleGroupItem node)
    {
        InASingleGroupItem(node);
        if(node.GetElementaryItem() != null)
        {
            node.GetElementaryItem().Apply(this);
        }
        OutASingleGroupItem(node);
    }
    public virtual void InASequenceGroupItem(ASequenceGroupItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutASequenceGroupItem(ASequenceGroupItem node)
    {
        DefaultOut(node);
    }

    public override void CaseASequenceGroupItem(ASequenceGroupItem node)
    {
        InASequenceGroupItem(node);
        if(node.GetElementaryItem() != null)
        {
            node.GetElementaryItem().Apply(this);
        }
        if(node.GetDot() != null)
        {
            node.GetDot().Apply(this);
        }
        if(node.GetGroupItem() != null)
        {
            node.GetGroupItem().Apply(this);
        }
        OutASequenceGroupItem(node);
    }
    public virtual void InAItemElementaryItem(AItemElementaryItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutAItemElementaryItem(AItemElementaryItem node)
    {
        DefaultOut(node);
    }

    public override void CaseAItemElementaryItem(AItemElementaryItem node)
    {
        InAItemElementaryItem(node);
        if(node.GetItem() != null)
        {
            node.GetItem().Apply(this);
        }
        OutAItemElementaryItem(node);
    }
    public virtual void InARenamesItemElementaryItem(ARenamesItemElementaryItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutARenamesItemElementaryItem(ARenamesItemElementaryItem node)
    {
        DefaultOut(node);
    }

    public override void CaseARenamesItemElementaryItem(ARenamesItemElementaryItem node)
    {
        InARenamesItemElementaryItem(node);
        if(node.GetRenamesItem() != null)
        {
            node.GetRenamesItem().Apply(this);
        }
        OutARenamesItemElementaryItem(node);
    }
    public virtual void InAValueItemElementaryItem(AValueItemElementaryItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueItemElementaryItem(AValueItemElementaryItem node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueItemElementaryItem(AValueItemElementaryItem node)
    {
        InAValueItemElementaryItem(node);
        if(node.GetValueItem() != null)
        {
            node.GetValueItem().Apply(this);
        }
        OutAValueItemElementaryItem(node);
    }
    public virtual void InAItem(AItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutAItem(AItem node)
    {
        DefaultOut(node);
    }

    public override void CaseAItem(AItem node)
    {
        InAItem(node);
        if(node.GetClauseSequence() != null)
        {
            node.GetClauseSequence().Apply(this);
        }
        if(node.GetRedefinesClause() != null)
        {
            node.GetRedefinesClause().Apply(this);
        }
        if(node.GetDataNameOrFiller() != null)
        {
            node.GetDataNameOrFiller().Apply(this);
        }
        if(node.GetNumberNot88() != null)
        {
            node.GetNumberNot88().Apply(this);
        }
        OutAItem(node);
    }
    public virtual void InADataNameDataNameOrFiller(ADataNameDataNameOrFiller node)
    {
        DefaultIn(node);
    }

    public virtual void OutADataNameDataNameOrFiller(ADataNameDataNameOrFiller node)
    {
        DefaultOut(node);
    }

    public override void CaseADataNameDataNameOrFiller(ADataNameDataNameOrFiller node)
    {
        InADataNameDataNameOrFiller(node);
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        OutADataNameDataNameOrFiller(node);
    }
    public virtual void InAFillerDataNameOrFiller(AFillerDataNameOrFiller node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFillerDataNameOrFiller(AFillerDataNameOrFiller node)
    {
        DefaultOut(node);
    }

    public override void CaseAFillerDataNameOrFiller(AFillerDataNameOrFiller node)
    {
        InAFillerDataNameOrFiller(node);
        if(node.GetFiller() != null)
        {
            node.GetFiller().Apply(this);
        }
        OutAFillerDataNameOrFiller(node);
    }
    public virtual void InARedefinesClause(ARedefinesClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutARedefinesClause(ARedefinesClause node)
    {
        DefaultOut(node);
    }

    public override void CaseARedefinesClause(ARedefinesClause node)
    {
        InARedefinesClause(node);
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        if(node.GetRedefines() != null)
        {
            node.GetRedefines().Apply(this);
        }
        OutARedefinesClause(node);
    }
    public virtual void InASingleClauseSequence(ASingleClauseSequence node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleClauseSequence(ASingleClauseSequence node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleClauseSequence(ASingleClauseSequence node)
    {
        InASingleClauseSequence(node);
        if(node.GetClause() != null)
        {
            node.GetClause().Apply(this);
        }
        OutASingleClauseSequence(node);
    }
    public virtual void InASequenceClauseSequence(ASequenceClauseSequence node)
    {
        DefaultIn(node);
    }

    public virtual void OutASequenceClauseSequence(ASequenceClauseSequence node)
    {
        DefaultOut(node);
    }

    public override void CaseASequenceClauseSequence(ASequenceClauseSequence node)
    {
        InASequenceClauseSequence(node);
        if(node.GetClause() != null)
        {
            node.GetClause().Apply(this);
        }
        if(node.GetClauseSequence() != null)
        {
            node.GetClauseSequence().Apply(this);
        }
        OutASequenceClauseSequence(node);
    }
    public virtual void InABlankWhenZeroClauseClause(ABlankWhenZeroClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutABlankWhenZeroClauseClause(ABlankWhenZeroClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseABlankWhenZeroClauseClause(ABlankWhenZeroClauseClause node)
    {
        InABlankWhenZeroClauseClause(node);
        if(node.GetBlankWhenZeroClause() != null)
        {
            node.GetBlankWhenZeroClause().Apply(this);
        }
        OutABlankWhenZeroClauseClause(node);
    }
    public virtual void InADateFormatClauseClause(ADateFormatClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutADateFormatClauseClause(ADateFormatClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseADateFormatClauseClause(ADateFormatClauseClause node)
    {
        InADateFormatClauseClause(node);
        if(node.GetDateFormatClause() != null)
        {
            node.GetDateFormatClause().Apply(this);
        }
        OutADateFormatClauseClause(node);
    }
    public virtual void InAExternalClauseClause(AExternalClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExternalClauseClause(AExternalClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAExternalClauseClause(AExternalClauseClause node)
    {
        InAExternalClauseClause(node);
        if(node.GetExternalClause() != null)
        {
            node.GetExternalClause().Apply(this);
        }
        OutAExternalClauseClause(node);
    }
    public virtual void InAGlobalClauseClause(AGlobalClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGlobalClauseClause(AGlobalClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAGlobalClauseClause(AGlobalClauseClause node)
    {
        InAGlobalClauseClause(node);
        if(node.GetGlobalClause() != null)
        {
            node.GetGlobalClause().Apply(this);
        }
        OutAGlobalClauseClause(node);
    }
    public virtual void InAJustifiedClauseClause(AJustifiedClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAJustifiedClauseClause(AJustifiedClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAJustifiedClauseClause(AJustifiedClauseClause node)
    {
        InAJustifiedClauseClause(node);
        if(node.GetJustifiedClause() != null)
        {
            node.GetJustifiedClause().Apply(this);
        }
        OutAJustifiedClauseClause(node);
    }
    public virtual void InAOccursClauseClause(AOccursClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOccursClauseClause(AOccursClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAOccursClauseClause(AOccursClauseClause node)
    {
        InAOccursClauseClause(node);
        if(node.GetOccursClause() != null)
        {
            node.GetOccursClause().Apply(this);
        }
        OutAOccursClauseClause(node);
    }
    public virtual void InAPictureClauseClause(APictureClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPictureClauseClause(APictureClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAPictureClauseClause(APictureClauseClause node)
    {
        InAPictureClauseClause(node);
        if(node.GetPictureClause() != null)
        {
            node.GetPictureClause().Apply(this);
        }
        OutAPictureClauseClause(node);
    }
    public virtual void InASignClauseClause(ASignClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutASignClauseClause(ASignClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseASignClauseClause(ASignClauseClause node)
    {
        InASignClauseClause(node);
        if(node.GetSignClause() != null)
        {
            node.GetSignClause().Apply(this);
        }
        OutASignClauseClause(node);
    }
    public virtual void InASynchronizedClauseClause(ASynchronizedClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutASynchronizedClauseClause(ASynchronizedClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseASynchronizedClauseClause(ASynchronizedClauseClause node)
    {
        InASynchronizedClauseClause(node);
        if(node.GetSynchronizedClause() != null)
        {
            node.GetSynchronizedClause().Apply(this);
        }
        OutASynchronizedClauseClause(node);
    }
    public virtual void InAUsageClauseClause(AUsageClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUsageClauseClause(AUsageClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAUsageClauseClause(AUsageClauseClause node)
    {
        InAUsageClauseClause(node);
        if(node.GetUsageClause() != null)
        {
            node.GetUsageClause().Apply(this);
        }
        OutAUsageClauseClause(node);
    }
    public virtual void InAValueClauseClause(AValueClauseClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueClauseClause(AValueClauseClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueClauseClause(AValueClauseClause node)
    {
        InAValueClauseClause(node);
        if(node.GetValueClause() != null)
        {
            node.GetValueClause().Apply(this);
        }
        OutAValueClauseClause(node);
    }
    public virtual void InABlankWhenZeroClause(ABlankWhenZeroClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutABlankWhenZeroClause(ABlankWhenZeroClause node)
    {
        DefaultOut(node);
    }

    public override void CaseABlankWhenZeroClause(ABlankWhenZeroClause node)
    {
        InABlankWhenZeroClause(node);
        if(node.GetZeros() != null)
        {
            node.GetZeros().Apply(this);
        }
        if(node.GetWhen() != null)
        {
            node.GetWhen().Apply(this);
        }
        if(node.GetBlank() != null)
        {
            node.GetBlank().Apply(this);
        }
        OutABlankWhenZeroClause(node);
    }
    public virtual void InADateFormatClause(ADateFormatClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutADateFormatClause(ADateFormatClause node)
    {
        DefaultOut(node);
    }

    public override void CaseADateFormatClause(ADateFormatClause node)
    {
        InADateFormatClause(node);
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        if(node.GetFormat() != null)
        {
            node.GetFormat().Apply(this);
        }
        if(node.GetDate() != null)
        {
            node.GetDate().Apply(this);
        }
        OutADateFormatClause(node);
    }
    public virtual void InAExternalClause(AExternalClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExternalClause(AExternalClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAExternalClause(AExternalClause node)
    {
        InAExternalClause(node);
        if(node.GetExternal() != null)
        {
            node.GetExternal().Apply(this);
        }
        OutAExternalClause(node);
    }
    public virtual void InAGlobalClause(AGlobalClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGlobalClause(AGlobalClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAGlobalClause(AGlobalClause node)
    {
        InAGlobalClause(node);
        if(node.GetGlobal() != null)
        {
            node.GetGlobal().Apply(this);
        }
        OutAGlobalClause(node);
    }
    public virtual void InAJustifiedClause(AJustifiedClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAJustifiedClause(AJustifiedClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAJustifiedClause(AJustifiedClause node)
    {
        InAJustifiedClause(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetJustified() != null)
        {
            node.GetJustified().Apply(this);
        }
        OutAJustifiedClause(node);
    }
    public virtual void InAOccursClause(AOccursClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOccursClause(AOccursClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAOccursClause(AOccursClause node)
    {
        InAOccursClause(node);
        {
            Object[] temp = new Object[node.GetIndexedByPhrase().Count];
            node.GetIndexedByPhrase().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PIndexedByPhrase) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetAscendingOrDescendingKeyPhrase().Count];
            node.GetAscendingOrDescendingKeyPhrase().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PAscendingOrDescendingKeyPhrase) temp[i]).Apply(this);
            }
        }
        if(node.GetOccursFixedOrVariable() != null)
        {
            node.GetOccursFixedOrVariable().Apply(this);
        }
        OutAOccursClause(node);
    }
    public virtual void InAFixedOccursFixedOrVariable(AFixedOccursFixedOrVariable node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFixedOccursFixedOrVariable(AFixedOccursFixedOrVariable node)
    {
        DefaultOut(node);
    }

    public override void CaseAFixedOccursFixedOrVariable(AFixedOccursFixedOrVariable node)
    {
        InAFixedOccursFixedOrVariable(node);
        if(node.GetTimes() != null)
        {
            node.GetTimes().Apply(this);
        }
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        if(node.GetOccurs() != null)
        {
            node.GetOccurs().Apply(this);
        }
        OutAFixedOccursFixedOrVariable(node);
    }
    public virtual void InAVariableOccursFixedOrVariable(AVariableOccursFixedOrVariable node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOccursFixedOrVariable(AVariableOccursFixedOrVariable node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOccursFixedOrVariable(AVariableOccursFixedOrVariable node)
    {
        InAVariableOccursFixedOrVariable(node);
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        if(node.GetOn() != null)
        {
            node.GetOn().Apply(this);
        }
        if(node.GetDepending() != null)
        {
            node.GetDepending().Apply(this);
        }
        if(node.GetTimes() != null)
        {
            node.GetTimes().Apply(this);
        }
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        if(node.GetOccursTo() != null)
        {
            node.GetOccursTo().Apply(this);
        }
        if(node.GetOccurs() != null)
        {
            node.GetOccurs().Apply(this);
        }
        OutAVariableOccursFixedOrVariable(node);
    }
    public virtual void InAOccursTo(AOccursTo node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOccursTo(AOccursTo node)
    {
        DefaultOut(node);
    }

    public override void CaseAOccursTo(AOccursTo node)
    {
        InAOccursTo(node);
        if(node.GetTo() != null)
        {
            node.GetTo().Apply(this);
        }
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutAOccursTo(node);
    }
    public virtual void InAAscendingOrDescendingKeyPhrase(AAscendingOrDescendingKeyPhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAscendingOrDescendingKeyPhrase(AAscendingOrDescendingKeyPhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAAscendingOrDescendingKeyPhrase(AAscendingOrDescendingKeyPhrase node)
    {
        InAAscendingOrDescendingKeyPhrase(node);
        {
            Object[] temp = new Object[node.GetDataName().Count];
            node.GetDataName().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((TDataName) temp[i]).Apply(this);
            }
        }
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        if(node.GetKey() != null)
        {
            node.GetKey().Apply(this);
        }
        if(node.GetAscendingOrDescending() != null)
        {
            node.GetAscendingOrDescending().Apply(this);
        }
        OutAAscendingOrDescendingKeyPhrase(node);
    }
    public virtual void InAAscendingAscendingOrDescending(AAscendingAscendingOrDescending node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAscendingAscendingOrDescending(AAscendingAscendingOrDescending node)
    {
        DefaultOut(node);
    }

    public override void CaseAAscendingAscendingOrDescending(AAscendingAscendingOrDescending node)
    {
        InAAscendingAscendingOrDescending(node);
        if(node.GetAscending() != null)
        {
            node.GetAscending().Apply(this);
        }
        OutAAscendingAscendingOrDescending(node);
    }
    public virtual void InADescendingAscendingOrDescending(ADescendingAscendingOrDescending node)
    {
        DefaultIn(node);
    }

    public virtual void OutADescendingAscendingOrDescending(ADescendingAscendingOrDescending node)
    {
        DefaultOut(node);
    }

    public override void CaseADescendingAscendingOrDescending(ADescendingAscendingOrDescending node)
    {
        InADescendingAscendingOrDescending(node);
        if(node.GetDescending() != null)
        {
            node.GetDescending().Apply(this);
        }
        OutADescendingAscendingOrDescending(node);
    }
    public virtual void InAIndexedByPhrase(AIndexedByPhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIndexedByPhrase(AIndexedByPhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAIndexedByPhrase(AIndexedByPhrase node)
    {
        InAIndexedByPhrase(node);
        {
            Object[] temp = new Object[node.GetDataName().Count];
            node.GetDataName().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((TDataName) temp[i]).Apply(this);
            }
        }
        if(node.GetBy() != null)
        {
            node.GetBy().Apply(this);
        }
        if(node.GetIndexed() != null)
        {
            node.GetIndexed().Apply(this);
        }
        OutAIndexedByPhrase(node);
    }
    public virtual void InAPictureClause(APictureClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPictureClause(APictureClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAPictureClause(APictureClause node)
    {
        InAPictureClause(node);
        if(node.GetCharacterString() != null)
        {
            node.GetCharacterString().Apply(this);
        }
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        if(node.GetPicture() != null)
        {
            node.GetPicture().Apply(this);
        }
        OutAPictureClause(node);
    }
    public virtual void InASignClause(ASignClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutASignClause(ASignClause node)
    {
        DefaultOut(node);
    }

    public override void CaseASignClause(ASignClause node)
    {
        InASignClause(node);
        if(node.GetSeparateCharacter() != null)
        {
            node.GetSeparateCharacter().Apply(this);
        }
        if(node.GetLeadingOrTrailing() != null)
        {
            node.GetLeadingOrTrailing().Apply(this);
        }
        if(node.GetSignIs() != null)
        {
            node.GetSignIs().Apply(this);
        }
        OutASignClause(node);
    }
    public virtual void InASignIs(ASignIs node)
    {
        DefaultIn(node);
    }

    public virtual void OutASignIs(ASignIs node)
    {
        DefaultOut(node);
    }

    public override void CaseASignIs(ASignIs node)
    {
        InASignIs(node);
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        if(node.GetSign() != null)
        {
            node.GetSign().Apply(this);
        }
        OutASignIs(node);
    }
    public virtual void InALeadingLeadingOrTrailing(ALeadingLeadingOrTrailing node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeadingLeadingOrTrailing(ALeadingLeadingOrTrailing node)
    {
        DefaultOut(node);
    }

    public override void CaseALeadingLeadingOrTrailing(ALeadingLeadingOrTrailing node)
    {
        InALeadingLeadingOrTrailing(node);
        if(node.GetLeading() != null)
        {
            node.GetLeading().Apply(this);
        }
        OutALeadingLeadingOrTrailing(node);
    }
    public virtual void InATrailingLeadingOrTrailing(ATrailingLeadingOrTrailing node)
    {
        DefaultIn(node);
    }

    public virtual void OutATrailingLeadingOrTrailing(ATrailingLeadingOrTrailing node)
    {
        DefaultOut(node);
    }

    public override void CaseATrailingLeadingOrTrailing(ATrailingLeadingOrTrailing node)
    {
        InATrailingLeadingOrTrailing(node);
        if(node.GetTrailing() != null)
        {
            node.GetTrailing().Apply(this);
        }
        OutATrailingLeadingOrTrailing(node);
    }
    public virtual void InASeparateCharacter(ASeparateCharacter node)
    {
        DefaultIn(node);
    }

    public virtual void OutASeparateCharacter(ASeparateCharacter node)
    {
        DefaultOut(node);
    }

    public override void CaseASeparateCharacter(ASeparateCharacter node)
    {
        InASeparateCharacter(node);
        if(node.GetCharacter() != null)
        {
            node.GetCharacter().Apply(this);
        }
        if(node.GetSeparate() != null)
        {
            node.GetSeparate().Apply(this);
        }
        OutASeparateCharacter(node);
    }
    public virtual void InASynchronizedClause(ASynchronizedClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutASynchronizedClause(ASynchronizedClause node)
    {
        DefaultOut(node);
    }

    public override void CaseASynchronizedClause(ASynchronizedClause node)
    {
        InASynchronizedClause(node);
        if(node.GetLeftOrRight() != null)
        {
            node.GetLeftOrRight().Apply(this);
        }
        if(node.GetSynchronized() != null)
        {
            node.GetSynchronized().Apply(this);
        }
        OutASynchronizedClause(node);
    }
    public virtual void InALeftLeftOrRight(ALeftLeftOrRight node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeftLeftOrRight(ALeftLeftOrRight node)
    {
        DefaultOut(node);
    }

    public override void CaseALeftLeftOrRight(ALeftLeftOrRight node)
    {
        InALeftLeftOrRight(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutALeftLeftOrRight(node);
    }
    public virtual void InARightLeftOrRight(ARightLeftOrRight node)
    {
        DefaultIn(node);
    }

    public virtual void OutARightLeftOrRight(ARightLeftOrRight node)
    {
        DefaultOut(node);
    }

    public override void CaseARightLeftOrRight(ARightLeftOrRight node)
    {
        InARightLeftOrRight(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutARightLeftOrRight(node);
    }
    public virtual void InAUsageClause(AUsageClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUsageClause(AUsageClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAUsageClause(AUsageClause node)
    {
        InAUsageClause(node);
        if(node.GetUsagePhrase() != null)
        {
            node.GetUsagePhrase().Apply(this);
        }
        if(node.GetUsageIs() != null)
        {
            node.GetUsageIs().Apply(this);
        }
        OutAUsageClause(node);
    }
    public virtual void InAUsageIs(AUsageIs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUsageIs(AUsageIs node)
    {
        DefaultOut(node);
    }

    public override void CaseAUsageIs(AUsageIs node)
    {
        InAUsageIs(node);
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        if(node.GetUsage() != null)
        {
            node.GetUsage().Apply(this);
        }
        OutAUsageIs(node);
    }
    public virtual void InABinaryUsagePhrase(ABinaryUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutABinaryUsagePhrase(ABinaryUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseABinaryUsagePhrase(ABinaryUsagePhrase node)
    {
        InABinaryUsagePhrase(node);
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        if(node.GetBinary() != null)
        {
            node.GetBinary().Apply(this);
        }
        OutABinaryUsagePhrase(node);
    }
    public virtual void InACompUsagePhrase(ACompUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompUsagePhrase(ACompUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseACompUsagePhrase(ACompUsagePhrase node)
    {
        InACompUsagePhrase(node);
        if(node.GetComp() != null)
        {
            node.GetComp().Apply(this);
        }
        OutACompUsagePhrase(node);
    }
    public virtual void InAComp1UsagePhrase(AComp1UsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComp1UsagePhrase(AComp1UsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAComp1UsagePhrase(AComp1UsagePhrase node)
    {
        InAComp1UsagePhrase(node);
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        if(node.GetComp1() != null)
        {
            node.GetComp1().Apply(this);
        }
        OutAComp1UsagePhrase(node);
    }
    public virtual void InAComp2UsagePhrase(AComp2UsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComp2UsagePhrase(AComp2UsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAComp2UsagePhrase(AComp2UsagePhrase node)
    {
        InAComp2UsagePhrase(node);
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        if(node.GetComp2() != null)
        {
            node.GetComp2().Apply(this);
        }
        OutAComp2UsagePhrase(node);
    }
    public virtual void InAComp3UsagePhrase(AComp3UsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComp3UsagePhrase(AComp3UsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAComp3UsagePhrase(AComp3UsagePhrase node)
    {
        InAComp3UsagePhrase(node);
        if(node.GetComp3() != null)
        {
            node.GetComp3().Apply(this);
        }
        OutAComp3UsagePhrase(node);
    }
    public virtual void InAComp4UsagePhrase(AComp4UsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComp4UsagePhrase(AComp4UsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAComp4UsagePhrase(AComp4UsagePhrase node)
    {
        InAComp4UsagePhrase(node);
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        if(node.GetComp4() != null)
        {
            node.GetComp4().Apply(this);
        }
        OutAComp4UsagePhrase(node);
    }
    public virtual void InAComp5UsagePhrase(AComp5UsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComp5UsagePhrase(AComp5UsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAComp5UsagePhrase(AComp5UsagePhrase node)
    {
        InAComp5UsagePhrase(node);
        if(node.GetComp5() != null)
        {
            node.GetComp5().Apply(this);
        }
        OutAComp5UsagePhrase(node);
    }
    public virtual void InADisplayUsagePhrase(ADisplayUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutADisplayUsagePhrase(ADisplayUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseADisplayUsagePhrase(ADisplayUsagePhrase node)
    {
        InADisplayUsagePhrase(node);
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        if(node.GetDisplay() != null)
        {
            node.GetDisplay().Apply(this);
        }
        OutADisplayUsagePhrase(node);
    }
    public virtual void InADisplay1UsagePhrase(ADisplay1UsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutADisplay1UsagePhrase(ADisplay1UsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseADisplay1UsagePhrase(ADisplay1UsagePhrase node)
    {
        InADisplay1UsagePhrase(node);
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        if(node.GetDisplay1() != null)
        {
            node.GetDisplay1().Apply(this);
        }
        OutADisplay1UsagePhrase(node);
    }
    public virtual void InAIndexUsagePhrase(AIndexUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIndexUsagePhrase(AIndexUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAIndexUsagePhrase(AIndexUsagePhrase node)
    {
        InAIndexUsagePhrase(node);
        if(node.GetIndex() != null)
        {
            node.GetIndex().Apply(this);
        }
        OutAIndexUsagePhrase(node);
    }
    public virtual void InANationalUsagePhrase(ANationalUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutANationalUsagePhrase(ANationalUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseANationalUsagePhrase(ANationalUsagePhrase node)
    {
        InANationalUsagePhrase(node);
        if(node.GetNational() != null)
        {
            node.GetNational().Apply(this);
        }
        OutANationalUsagePhrase(node);
    }
    public virtual void InAObjectReferencePhraseUsagePhrase(AObjectReferencePhraseUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAObjectReferencePhraseUsagePhrase(AObjectReferencePhraseUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAObjectReferencePhraseUsagePhrase(AObjectReferencePhraseUsagePhrase node)
    {
        InAObjectReferencePhraseUsagePhrase(node);
        if(node.GetObjectReferencePhrase() != null)
        {
            node.GetObjectReferencePhrase().Apply(this);
        }
        OutAObjectReferencePhraseUsagePhrase(node);
    }
    public virtual void InAPackedDecimalUsagePhrase(APackedDecimalUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPackedDecimalUsagePhrase(APackedDecimalUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAPackedDecimalUsagePhrase(APackedDecimalUsagePhrase node)
    {
        InAPackedDecimalUsagePhrase(node);
        if(node.GetPackedDecimal() != null)
        {
            node.GetPackedDecimal().Apply(this);
        }
        OutAPackedDecimalUsagePhrase(node);
    }
    public virtual void InAPointerUsagePhrase(APointerUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPointerUsagePhrase(APointerUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAPointerUsagePhrase(APointerUsagePhrase node)
    {
        InAPointerUsagePhrase(node);
        if(node.GetPointer() != null)
        {
            node.GetPointer().Apply(this);
        }
        OutAPointerUsagePhrase(node);
    }
    public virtual void InAProcedurePointerUsagePhrase(AProcedurePointerUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedurePointerUsagePhrase(AProcedurePointerUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedurePointerUsagePhrase(AProcedurePointerUsagePhrase node)
    {
        InAProcedurePointerUsagePhrase(node);
        if(node.GetProcedurePointer() != null)
        {
            node.GetProcedurePointer().Apply(this);
        }
        OutAProcedurePointerUsagePhrase(node);
    }
    public virtual void InAFunctionPointerUsagePhrase(AFunctionPointerUsagePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionPointerUsagePhrase(AFunctionPointerUsagePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionPointerUsagePhrase(AFunctionPointerUsagePhrase node)
    {
        InAFunctionPointerUsagePhrase(node);
        if(node.GetFunctionPointer() != null)
        {
            node.GetFunctionPointer().Apply(this);
        }
        OutAFunctionPointerUsagePhrase(node);
    }
    public virtual void InAObjectReferencePhrase(AObjectReferencePhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAObjectReferencePhrase(AObjectReferencePhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAObjectReferencePhrase(AObjectReferencePhrase node)
    {
        InAObjectReferencePhrase(node);
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        if(node.GetReference() != null)
        {
            node.GetReference().Apply(this);
        }
        if(node.GetObject() != null)
        {
            node.GetObject().Apply(this);
        }
        OutAObjectReferencePhrase(node);
    }
    public virtual void InARenamesItem(ARenamesItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutARenamesItem(ARenamesItem node)
    {
        DefaultOut(node);
    }

    public override void CaseARenamesItem(ARenamesItem node)
    {
        InARenamesItem(node);
        if(node.GetThroughPhrase() != null)
        {
            node.GetThroughPhrase().Apply(this);
        }
        if(node.GetRenameFrom() != null)
        {
            node.GetRenameFrom().Apply(this);
        }
        if(node.GetRenames() != null)
        {
            node.GetRenames().Apply(this);
        }
        if(node.GetRenameTo() != null)
        {
            node.GetRenameTo().Apply(this);
        }
        if(node.GetNumberNot88() != null)
        {
            node.GetNumberNot88().Apply(this);
        }
        OutARenamesItem(node);
    }
    public virtual void InAThroughPhrase(AThroughPhrase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThroughPhrase(AThroughPhrase node)
    {
        DefaultOut(node);
    }

    public override void CaseAThroughPhrase(AThroughPhrase node)
    {
        InAThroughPhrase(node);
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        if(node.GetThrough() != null)
        {
            node.GetThrough().Apply(this);
        }
        OutAThroughPhrase(node);
    }
    public virtual void InAValueClause(AValueClause node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueClause(AValueClause node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueClause(AValueClause node)
    {
        InAValueClause(node);
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        if(node.GetAll() != null)
        {
            node.GetAll().Apply(this);
        }
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutAValueClause(node);
    }
    public virtual void InAValueItem(AValueItem node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueItem(AValueItem node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueItem(AValueItem node)
    {
        InAValueItem(node);
        if(node.GetLiteralSequence() != null)
        {
            node.GetLiteralSequence().Apply(this);
        }
        if(node.GetValueOrValues() != null)
        {
            node.GetValueOrValues().Apply(this);
        }
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        if(node.GetNumber88() != null)
        {
            node.GetNumber88().Apply(this);
        }
        OutAValueItem(node);
    }
    public virtual void InAValueValueOrValues(AValueValueOrValues node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueValueOrValues(AValueValueOrValues node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueValueOrValues(AValueValueOrValues node)
    {
        InAValueValueOrValues(node);
        if(node.GetIs() != null)
        {
            node.GetIs().Apply(this);
        }
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutAValueValueOrValues(node);
    }
    public virtual void InAValuesValueOrValues(AValuesValueOrValues node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValuesValueOrValues(AValuesValueOrValues node)
    {
        DefaultOut(node);
    }

    public override void CaseAValuesValueOrValues(AValuesValueOrValues node)
    {
        InAValuesValueOrValues(node);
        if(node.GetAre() != null)
        {
            node.GetAre().Apply(this);
        }
        if(node.GetValues() != null)
        {
            node.GetValues().Apply(this);
        }
        OutAValuesValueOrValues(node);
    }
    public virtual void InASingleLiteralSequence(ASingleLiteralSequence node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleLiteralSequence(ASingleLiteralSequence node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleLiteralSequence(ASingleLiteralSequence node)
    {
        InASingleLiteralSequence(node);
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        if(node.GetAll() != null)
        {
            node.GetAll().Apply(this);
        }
        OutASingleLiteralSequence(node);
    }
    public virtual void InASequenceLiteralSequence(ASequenceLiteralSequence node)
    {
        DefaultIn(node);
    }

    public virtual void OutASequenceLiteralSequence(ASequenceLiteralSequence node)
    {
        DefaultOut(node);
    }

    public override void CaseASequenceLiteralSequence(ASequenceLiteralSequence node)
    {
        InASequenceLiteralSequence(node);
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetLiteralSequence() != null)
        {
            node.GetLiteralSequence().Apply(this);
        }
        OutASequenceLiteralSequence(node);
    }
    public virtual void InAThroughSingleLiteralSequence(AThroughSingleLiteralSequence node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThroughSingleLiteralSequence(AThroughSingleLiteralSequence node)
    {
        DefaultOut(node);
    }

    public override void CaseAThroughSingleLiteralSequence(AThroughSingleLiteralSequence node)
    {
        InAThroughSingleLiteralSequence(node);
        if(node.GetTo() != null)
        {
            node.GetTo().Apply(this);
        }
        if(node.GetThrough() != null)
        {
            node.GetThrough().Apply(this);
        }
        if(node.GetFrom() != null)
        {
            node.GetFrom().Apply(this);
        }
        OutAThroughSingleLiteralSequence(node);
    }
    public virtual void InAThroughSequenceLiteralSequence(AThroughSequenceLiteralSequence node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThroughSequenceLiteralSequence(AThroughSequenceLiteralSequence node)
    {
        DefaultOut(node);
    }

    public override void CaseAThroughSequenceLiteralSequence(AThroughSequenceLiteralSequence node)
    {
        InAThroughSequenceLiteralSequence(node);
        if(node.GetTo() != null)
        {
            node.GetTo().Apply(this);
        }
        if(node.GetThrough() != null)
        {
            node.GetThrough().Apply(this);
        }
        if(node.GetFrom() != null)
        {
            node.GetFrom().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetLiteralSequence() != null)
        {
            node.GetLiteralSequence().Apply(this);
        }
        OutAThroughSequenceLiteralSequence(node);
    }
    public virtual void InAZerosLiteral(AZerosLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAZerosLiteral(AZerosLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAZerosLiteral(AZerosLiteral node)
    {
        InAZerosLiteral(node);
        if(node.GetZeros() != null)
        {
            node.GetZeros().Apply(this);
        }
        OutAZerosLiteral(node);
    }
    public virtual void InASpacesLiteral(ASpacesLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutASpacesLiteral(ASpacesLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseASpacesLiteral(ASpacesLiteral node)
    {
        InASpacesLiteral(node);
        if(node.GetSpaces() != null)
        {
            node.GetSpaces().Apply(this);
        }
        OutASpacesLiteral(node);
    }
    public virtual void InAHighValuesLiteral(AHighValuesLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHighValuesLiteral(AHighValuesLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAHighValuesLiteral(AHighValuesLiteral node)
    {
        InAHighValuesLiteral(node);
        if(node.GetHighValues() != null)
        {
            node.GetHighValues().Apply(this);
        }
        OutAHighValuesLiteral(node);
    }
    public virtual void InALowValuesLiteral(ALowValuesLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutALowValuesLiteral(ALowValuesLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseALowValuesLiteral(ALowValuesLiteral node)
    {
        InALowValuesLiteral(node);
        if(node.GetLowValues() != null)
        {
            node.GetLowValues().Apply(this);
        }
        OutALowValuesLiteral(node);
    }
    public virtual void InAQuotesLiteral(AQuotesLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAQuotesLiteral(AQuotesLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAQuotesLiteral(AQuotesLiteral node)
    {
        InAQuotesLiteral(node);
        if(node.GetQuotes() != null)
        {
            node.GetQuotes().Apply(this);
        }
        OutAQuotesLiteral(node);
    }
    public virtual void InANullsLiteral(ANullsLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutANullsLiteral(ANullsLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseANullsLiteral(ANullsLiteral node)
    {
        InANullsLiteral(node);
        if(node.GetNulls() != null)
        {
            node.GetNulls().Apply(this);
        }
        OutANullsLiteral(node);
    }
    public virtual void InANumberLiteral(ANumberLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberLiteral(ANumberLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberLiteral(ANumberLiteral node)
    {
        InANumberLiteral(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutANumberLiteral(node);
    }
    public virtual void InANumericLiteralLiteral(ANumericLiteralLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumericLiteralLiteral(ANumericLiteralLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseANumericLiteralLiteral(ANumericLiteralLiteral node)
    {
        InANumericLiteralLiteral(node);
        if(node.GetNumericLiteral() != null)
        {
            node.GetNumericLiteral().Apply(this);
        }
        OutANumericLiteralLiteral(node);
    }
    public virtual void InAAlphanumericLiteralLiteral(AAlphanumericLiteralLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAlphanumericLiteralLiteral(AAlphanumericLiteralLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAAlphanumericLiteralLiteral(AAlphanumericLiteralLiteral node)
    {
        InAAlphanumericLiteralLiteral(node);
        if(node.GetAlphanumericLiteral() != null)
        {
            node.GetAlphanumericLiteral().Apply(this);
        }
        OutAAlphanumericLiteralLiteral(node);
    }
    public virtual void InASingleCharacterString(ASingleCharacterString node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleCharacterString(ASingleCharacterString node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleCharacterString(ASingleCharacterString node)
    {
        InASingleCharacterString(node);
        if(node.GetCharacterSubstring() != null)
        {
            node.GetCharacterSubstring().Apply(this);
        }
        OutASingleCharacterString(node);
    }
    public virtual void InASequenceCharacterString(ASequenceCharacterString node)
    {
        DefaultIn(node);
    }

    public virtual void OutASequenceCharacterString(ASequenceCharacterString node)
    {
        DefaultOut(node);
    }

    public override void CaseASequenceCharacterString(ASequenceCharacterString node)
    {
        InASequenceCharacterString(node);
        if(node.GetCharacterSubstring() != null)
        {
            node.GetCharacterSubstring().Apply(this);
        }
        if(node.GetCharacterString() != null)
        {
            node.GetCharacterString().Apply(this);
        }
        OutASequenceCharacterString(node);
    }
    public virtual void InADataNameCharacterSubstring(ADataNameCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutADataNameCharacterSubstring(ADataNameCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseADataNameCharacterSubstring(ADataNameCharacterSubstring node)
    {
        InADataNameCharacterSubstring(node);
        if(node.GetDataName() != null)
        {
            node.GetDataName().Apply(this);
        }
        OutADataNameCharacterSubstring(node);
    }
    public virtual void InAPlusCharacterSubstring(APlusCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusCharacterSubstring(APlusCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusCharacterSubstring(APlusCharacterSubstring node)
    {
        InAPlusCharacterSubstring(node);
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        OutAPlusCharacterSubstring(node);
    }
    public virtual void InAMinusCharacterSubstring(AMinusCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusCharacterSubstring(AMinusCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusCharacterSubstring(AMinusCharacterSubstring node)
    {
        InAMinusCharacterSubstring(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutAMinusCharacterSubstring(node);
    }
    public virtual void InAStarCharacterSubstring(AStarCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStarCharacterSubstring(AStarCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseAStarCharacterSubstring(AStarCharacterSubstring node)
    {
        InAStarCharacterSubstring(node);
        if(node.GetStar() != null)
        {
            node.GetStar().Apply(this);
        }
        OutAStarCharacterSubstring(node);
    }
    public virtual void InASlashCharacterSubstring(ASlashCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutASlashCharacterSubstring(ASlashCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseASlashCharacterSubstring(ASlashCharacterSubstring node)
    {
        InASlashCharacterSubstring(node);
        if(node.GetSlash() != null)
        {
            node.GetSlash().Apply(this);
        }
        OutASlashCharacterSubstring(node);
    }
    public virtual void InADollarCharacterSubstring(ADollarCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutADollarCharacterSubstring(ADollarCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseADollarCharacterSubstring(ADollarCharacterSubstring node)
    {
        InADollarCharacterSubstring(node);
        if(node.GetDollar() != null)
        {
            node.GetDollar().Apply(this);
        }
        OutADollarCharacterSubstring(node);
    }
    public virtual void InACommaCharacterSubstring(ACommaCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutACommaCharacterSubstring(ACommaCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseACommaCharacterSubstring(ACommaCharacterSubstring node)
    {
        InACommaCharacterSubstring(node);
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        OutACommaCharacterSubstring(node);
    }
    public virtual void InANumberCharacterSubstring(ANumberCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberCharacterSubstring(ANumberCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberCharacterSubstring(ANumberCharacterSubstring node)
    {
        InANumberCharacterSubstring(node);
        if(node.GetNumberNot88() != null)
        {
            node.GetNumberNot88().Apply(this);
        }
        OutANumberCharacterSubstring(node);
    }
    public virtual void InANumericLiteralCharacterSubstring(ANumericLiteralCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumericLiteralCharacterSubstring(ANumericLiteralCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseANumericLiteralCharacterSubstring(ANumericLiteralCharacterSubstring node)
    {
        InANumericLiteralCharacterSubstring(node);
        if(node.GetNumericLiteral() != null)
        {
            node.GetNumericLiteral().Apply(this);
        }
        OutANumericLiteralCharacterSubstring(node);
    }
    public virtual void InABracketedNumberCharacterSubstring(ABracketedNumberCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutABracketedNumberCharacterSubstring(ABracketedNumberCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseABracketedNumberCharacterSubstring(ABracketedNumberCharacterSubstring node)
    {
        InABracketedNumberCharacterSubstring(node);
        if(node.GetBracketedNumber() != null)
        {
            node.GetBracketedNumber().Apply(this);
        }
        OutABracketedNumberCharacterSubstring(node);
    }
    public virtual void InADotZeeCharacterSubstring(ADotZeeCharacterSubstring node)
    {
        DefaultIn(node);
    }

    public virtual void OutADotZeeCharacterSubstring(ADotZeeCharacterSubstring node)
    {
        DefaultOut(node);
    }

    public override void CaseADotZeeCharacterSubstring(ADotZeeCharacterSubstring node)
    {
        InADotZeeCharacterSubstring(node);
        if(node.GetDotZee() != null)
        {
            node.GetDotZee().Apply(this);
        }
        OutADotZeeCharacterSubstring(node);
    }
    public virtual void InABracketedNumber(ABracketedNumber node)
    {
        DefaultIn(node);
    }

    public virtual void OutABracketedNumber(ABracketedNumber node)
    {
        DefaultOut(node);
    }

    public override void CaseABracketedNumber(ABracketedNumber node)
    {
        InABracketedNumber(node);
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        OutABracketedNumber(node);
    }
    public virtual void InANumberNot88Number(ANumberNot88Number node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberNot88Number(ANumberNot88Number node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberNot88Number(ANumberNot88Number node)
    {
        InANumberNot88Number(node);
        if(node.GetNumberNot88() != null)
        {
            node.GetNumberNot88().Apply(this);
        }
        OutANumberNot88Number(node);
    }
    public virtual void InANumber88Number(ANumber88Number node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumber88Number(ANumber88Number node)
    {
        DefaultOut(node);
    }

    public override void CaseANumber88Number(ANumber88Number node)
    {
        InANumber88Number(node);
        if(node.GetNumber88() != null)
        {
            node.GetNumber88().Apply(this);
        }
        OutANumber88Number(node);
    }
}
} // namespace net.sf.cb2xml.sablecc.analysis
