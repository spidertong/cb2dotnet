/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  net.sf.cb2xml.sablecc.analysis;

namespace net.sf.cb2xml.sablecc.node {

public abstract class PRecordDescription : Node
{
}

public abstract class PGroupItem : Node
{
}

public abstract class PElementaryItem : Node
{
}

public abstract class PItem : Node
{
}

public abstract class PDataNameOrFiller : Node
{
}

public abstract class PRedefinesClause : Node
{
}

public abstract class PClauseSequence : Node
{
}

public abstract class PClause : Node
{
}

public abstract class PBlankWhenZeroClause : Node
{
}

public abstract class PDateFormatClause : Node
{
}

public abstract class PExternalClause : Node
{
}

public abstract class PGlobalClause : Node
{
}

public abstract class PJustifiedClause : Node
{
}

public abstract class POccursClause : Node
{
}

public abstract class POccursFixedOrVariable : Node
{
}

public abstract class POccursTo : Node
{
}

public abstract class PAscendingOrDescendingKeyPhrase : Node
{
}

public abstract class PAscendingOrDescending : Node
{
}

public abstract class PIndexedByPhrase : Node
{
}

public abstract class PPictureClause : Node
{
}

public abstract class PSignClause : Node
{
}

public abstract class PSignIs : Node
{
}

public abstract class PLeadingOrTrailing : Node
{
}

public abstract class PSeparateCharacter : Node
{
}

public abstract class PSynchronizedClause : Node
{
}

public abstract class PLeftOrRight : Node
{
}

public abstract class PUsageClause : Node
{
}

public abstract class PUsageIs : Node
{
}

public abstract class PUsagePhrase : Node
{
}

public abstract class PObjectReferencePhrase : Node
{
}

public abstract class PRenamesItem : Node
{
}

public abstract class PThroughPhrase : Node
{
}

public abstract class PValueClause : Node
{
}

public abstract class PValueItem : Node
{
}

public abstract class PValueOrValues : Node
{
}

public abstract class PLiteralSequence : Node
{
}

public abstract class PLiteral : Node
{
}

public abstract class PCharacterString : Node
{
}

public abstract class PCharacterSubstring : Node
{
}

public abstract class PBracketedNumber : Node
{
}

public abstract class PNumber : Node
{
}


public sealed class ARecordDescription : PRecordDescription
{
    private PGroupItem _group_item_;
    private TDot _dot_;

    public ARecordDescription ()
    {
    }

    public ARecordDescription (
            PGroupItem _group_item_,
            TDot _dot_
    )
    {
        SetGroupItem (_group_item_);
        SetDot (_dot_);
    }

    public override Object Clone()
    {
        return new ARecordDescription (
            (PGroupItem)CloneNode (_group_item_),
            (TDot)CloneNode (_dot_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARecordDescription(this);
    }

    public PGroupItem GetGroupItem ()
    {
        return _group_item_;
    }

    public void SetGroupItem (PGroupItem node)
    {
        if(_group_item_ != null)
        {
            _group_item_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _group_item_ = node;
    }
    public TDot GetDot ()
    {
        return _dot_;
    }

    public void SetDot (TDot node)
    {
        if(_dot_ != null)
        {
            _dot_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dot_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_group_item_)
            + ToString (_dot_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _group_item_ == child )
        {
            _group_item_ = null;
            return;
        }
        if ( _dot_ == child )
        {
            _dot_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _group_item_ == oldChild )
        {
            SetGroupItem ((PGroupItem) newChild);
            return;
        }
        if ( _dot_ == oldChild )
        {
            SetDot ((TDot) newChild);
            return;
        }
    }

}
public sealed class ASingleGroupItem : PGroupItem
{
    private PElementaryItem _elementary_item_;

    public ASingleGroupItem ()
    {
    }

    public ASingleGroupItem (
            PElementaryItem _elementary_item_
    )
    {
        SetElementaryItem (_elementary_item_);
    }

    public override Object Clone()
    {
        return new ASingleGroupItem (
            (PElementaryItem)CloneNode (_elementary_item_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleGroupItem(this);
    }

    public PElementaryItem GetElementaryItem ()
    {
        return _elementary_item_;
    }

    public void SetElementaryItem (PElementaryItem node)
    {
        if(_elementary_item_ != null)
        {
            _elementary_item_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elementary_item_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_elementary_item_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _elementary_item_ == child )
        {
            _elementary_item_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _elementary_item_ == oldChild )
        {
            SetElementaryItem ((PElementaryItem) newChild);
            return;
        }
    }

}
public sealed class ASequenceGroupItem : PGroupItem
{
    private PGroupItem _group_item_;
    private TDot _dot_;
    private PElementaryItem _elementary_item_;

    public ASequenceGroupItem ()
    {
    }

    public ASequenceGroupItem (
            PGroupItem _group_item_,
            TDot _dot_,
            PElementaryItem _elementary_item_
    )
    {
        SetGroupItem (_group_item_);
        SetDot (_dot_);
        SetElementaryItem (_elementary_item_);
    }

    public override Object Clone()
    {
        return new ASequenceGroupItem (
            (PGroupItem)CloneNode (_group_item_),
            (TDot)CloneNode (_dot_),
            (PElementaryItem)CloneNode (_elementary_item_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASequenceGroupItem(this);
    }

    public PGroupItem GetGroupItem ()
    {
        return _group_item_;
    }

    public void SetGroupItem (PGroupItem node)
    {
        if(_group_item_ != null)
        {
            _group_item_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _group_item_ = node;
    }
    public TDot GetDot ()
    {
        return _dot_;
    }

    public void SetDot (TDot node)
    {
        if(_dot_ != null)
        {
            _dot_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dot_ = node;
    }
    public PElementaryItem GetElementaryItem ()
    {
        return _elementary_item_;
    }

    public void SetElementaryItem (PElementaryItem node)
    {
        if(_elementary_item_ != null)
        {
            _elementary_item_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elementary_item_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_group_item_)
            + ToString (_dot_)
            + ToString (_elementary_item_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _group_item_ == child )
        {
            _group_item_ = null;
            return;
        }
        if ( _dot_ == child )
        {
            _dot_ = null;
            return;
        }
        if ( _elementary_item_ == child )
        {
            _elementary_item_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _group_item_ == oldChild )
        {
            SetGroupItem ((PGroupItem) newChild);
            return;
        }
        if ( _dot_ == oldChild )
        {
            SetDot ((TDot) newChild);
            return;
        }
        if ( _elementary_item_ == oldChild )
        {
            SetElementaryItem ((PElementaryItem) newChild);
            return;
        }
    }

}
public sealed class AItemElementaryItem : PElementaryItem
{
    private PItem _item_;

    public AItemElementaryItem ()
    {
    }

    public AItemElementaryItem (
            PItem _item_
    )
    {
        SetItem (_item_);
    }

    public override Object Clone()
    {
        return new AItemElementaryItem (
            (PItem)CloneNode (_item_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAItemElementaryItem(this);
    }

    public PItem GetItem ()
    {
        return _item_;
    }

    public void SetItem (PItem node)
    {
        if(_item_ != null)
        {
            _item_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _item_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_item_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _item_ == child )
        {
            _item_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _item_ == oldChild )
        {
            SetItem ((PItem) newChild);
            return;
        }
    }

}
public sealed class ARenamesItemElementaryItem : PElementaryItem
{
    private PRenamesItem _renames_item_;

    public ARenamesItemElementaryItem ()
    {
    }

    public ARenamesItemElementaryItem (
            PRenamesItem _renames_item_
    )
    {
        SetRenamesItem (_renames_item_);
    }

    public override Object Clone()
    {
        return new ARenamesItemElementaryItem (
            (PRenamesItem)CloneNode (_renames_item_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARenamesItemElementaryItem(this);
    }

    public PRenamesItem GetRenamesItem ()
    {
        return _renames_item_;
    }

    public void SetRenamesItem (PRenamesItem node)
    {
        if(_renames_item_ != null)
        {
            _renames_item_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _renames_item_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_renames_item_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _renames_item_ == child )
        {
            _renames_item_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _renames_item_ == oldChild )
        {
            SetRenamesItem ((PRenamesItem) newChild);
            return;
        }
    }

}
public sealed class AValueItemElementaryItem : PElementaryItem
{
    private PValueItem _value_item_;

    public AValueItemElementaryItem ()
    {
    }

    public AValueItemElementaryItem (
            PValueItem _value_item_
    )
    {
        SetValueItem (_value_item_);
    }

    public override Object Clone()
    {
        return new AValueItemElementaryItem (
            (PValueItem)CloneNode (_value_item_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAValueItemElementaryItem(this);
    }

    public PValueItem GetValueItem ()
    {
        return _value_item_;
    }

    public void SetValueItem (PValueItem node)
    {
        if(_value_item_ != null)
        {
            _value_item_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_item_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_value_item_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _value_item_ == child )
        {
            _value_item_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _value_item_ == oldChild )
        {
            SetValueItem ((PValueItem) newChild);
            return;
        }
    }

}
public sealed class AItem : PItem
{
    private TNumberNot88 _number_not88_;
    private PDataNameOrFiller _data_name_or_filler_;
    private PRedefinesClause _redefines_clause_;
    private PClauseSequence _clause_sequence_;

    public AItem ()
    {
    }

    public AItem (
            TNumberNot88 _number_not88_,
            PDataNameOrFiller _data_name_or_filler_,
            PRedefinesClause _redefines_clause_,
            PClauseSequence _clause_sequence_
    )
    {
        SetNumberNot88 (_number_not88_);
        SetDataNameOrFiller (_data_name_or_filler_);
        SetRedefinesClause (_redefines_clause_);
        SetClauseSequence (_clause_sequence_);
    }

    public override Object Clone()
    {
        return new AItem (
            (TNumberNot88)CloneNode (_number_not88_),
            (PDataNameOrFiller)CloneNode (_data_name_or_filler_),
            (PRedefinesClause)CloneNode (_redefines_clause_),
            (PClauseSequence)CloneNode (_clause_sequence_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAItem(this);
    }

    public TNumberNot88 GetNumberNot88 ()
    {
        return _number_not88_;
    }

    public void SetNumberNot88 (TNumberNot88 node)
    {
        if(_number_not88_ != null)
        {
            _number_not88_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_not88_ = node;
    }
    public PDataNameOrFiller GetDataNameOrFiller ()
    {
        return _data_name_or_filler_;
    }

    public void SetDataNameOrFiller (PDataNameOrFiller node)
    {
        if(_data_name_or_filler_ != null)
        {
            _data_name_or_filler_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _data_name_or_filler_ = node;
    }
    public PRedefinesClause GetRedefinesClause ()
    {
        return _redefines_clause_;
    }

    public void SetRedefinesClause (PRedefinesClause node)
    {
        if(_redefines_clause_ != null)
        {
            _redefines_clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _redefines_clause_ = node;
    }
    public PClauseSequence GetClauseSequence ()
    {
        return _clause_sequence_;
    }

    public void SetClauseSequence (PClauseSequence node)
    {
        if(_clause_sequence_ != null)
        {
            _clause_sequence_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _clause_sequence_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_not88_)
            + ToString (_data_name_or_filler_)
            + ToString (_redefines_clause_)
            + ToString (_clause_sequence_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_not88_ == child )
        {
            _number_not88_ = null;
            return;
        }
        if ( _data_name_or_filler_ == child )
        {
            _data_name_or_filler_ = null;
            return;
        }
        if ( _redefines_clause_ == child )
        {
            _redefines_clause_ = null;
            return;
        }
        if ( _clause_sequence_ == child )
        {
            _clause_sequence_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_not88_ == oldChild )
        {
            SetNumberNot88 ((TNumberNot88) newChild);
            return;
        }
        if ( _data_name_or_filler_ == oldChild )
        {
            SetDataNameOrFiller ((PDataNameOrFiller) newChild);
            return;
        }
        if ( _redefines_clause_ == oldChild )
        {
            SetRedefinesClause ((PRedefinesClause) newChild);
            return;
        }
        if ( _clause_sequence_ == oldChild )
        {
            SetClauseSequence ((PClauseSequence) newChild);
            return;
        }
    }

}
public sealed class ADataNameDataNameOrFiller : PDataNameOrFiller
{
    private TDataName _data_name_;

    public ADataNameDataNameOrFiller ()
    {
    }

    public ADataNameDataNameOrFiller (
            TDataName _data_name_
    )
    {
        SetDataName (_data_name_);
    }

    public override Object Clone()
    {
        return new ADataNameDataNameOrFiller (
            (TDataName)CloneNode (_data_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADataNameDataNameOrFiller(this);
    }

    public TDataName GetDataName ()
    {
        return _data_name_;
    }

    public void SetDataName (TDataName node)
    {
        if(_data_name_ != null)
        {
            _data_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _data_name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_data_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _data_name_ == child )
        {
            _data_name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _data_name_ == oldChild )
        {
            SetDataName ((TDataName) newChild);
            return;
        }
    }

}
public sealed class AFillerDataNameOrFiller : PDataNameOrFiller
{
    private TFiller _filler_;

    public AFillerDataNameOrFiller ()
    {
    }

    public AFillerDataNameOrFiller (
            TFiller _filler_
    )
    {
        SetFiller (_filler_);
    }

    public override Object Clone()
    {
        return new AFillerDataNameOrFiller (
            (TFiller)CloneNode (_filler_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFillerDataNameOrFiller(this);
    }

    public TFiller GetFiller ()
    {
        return _filler_;
    }

    public void SetFiller (TFiller node)
    {
        if(_filler_ != null)
        {
            _filler_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _filler_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_filler_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _filler_ == child )
        {
            _filler_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _filler_ == oldChild )
        {
            SetFiller ((TFiller) newChild);
            return;
        }
    }

}
public sealed class ARedefinesClause : PRedefinesClause
{
    private TRedefines _redefines_;
    private TDataName _data_name_;

    public ARedefinesClause ()
    {
    }

    public ARedefinesClause (
            TRedefines _redefines_,
            TDataName _data_name_
    )
    {
        SetRedefines (_redefines_);
        SetDataName (_data_name_);
    }

    public override Object Clone()
    {
        return new ARedefinesClause (
            (TRedefines)CloneNode (_redefines_),
            (TDataName)CloneNode (_data_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARedefinesClause(this);
    }

    public TRedefines GetRedefines ()
    {
        return _redefines_;
    }

    public void SetRedefines (TRedefines node)
    {
        if(_redefines_ != null)
        {
            _redefines_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _redefines_ = node;
    }
    public TDataName GetDataName ()
    {
        return _data_name_;
    }

    public void SetDataName (TDataName node)
    {
        if(_data_name_ != null)
        {
            _data_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _data_name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_redefines_)
            + ToString (_data_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _redefines_ == child )
        {
            _redefines_ = null;
            return;
        }
        if ( _data_name_ == child )
        {
            _data_name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _redefines_ == oldChild )
        {
            SetRedefines ((TRedefines) newChild);
            return;
        }
        if ( _data_name_ == oldChild )
        {
            SetDataName ((TDataName) newChild);
            return;
        }
    }

}
public sealed class ASingleClauseSequence : PClauseSequence
{
    private PClause _clause_;

    public ASingleClauseSequence ()
    {
    }

    public ASingleClauseSequence (
            PClause _clause_
    )
    {
        SetClause (_clause_);
    }

    public override Object Clone()
    {
        return new ASingleClauseSequence (
            (PClause)CloneNode (_clause_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleClauseSequence(this);
    }

    public PClause GetClause ()
    {
        return _clause_;
    }

    public void SetClause (PClause node)
    {
        if(_clause_ != null)
        {
            _clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _clause_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_clause_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _clause_ == child )
        {
            _clause_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _clause_ == oldChild )
        {
            SetClause ((PClause) newChild);
            return;
        }
    }

}
public sealed class ASequenceClauseSequence : PClauseSequence
{
    private PClauseSequence _clause_sequence_;
    private PClause _clause_;

    public ASequenceClauseSequence ()
    {
    }

    public ASequenceClauseSequence (
            PClauseSequence _clause_sequence_,
            PClause _clause_
    )
    {
        SetClauseSequence (_clause_sequence_);
        SetClause (_clause_);
    }

    public override Object Clone()
    {
        return new ASequenceClauseSequence (
            (PClauseSequence)CloneNode (_clause_sequence_),
            (PClause)CloneNode (_clause_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASequenceClauseSequence(this);
    }

    public PClauseSequence GetClauseSequence ()
    {
        return _clause_sequence_;
    }

    public void SetClauseSequence (PClauseSequence node)
    {
        if(_clause_sequence_ != null)
        {
            _clause_sequence_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _clause_sequence_ = node;
    }
    public PClause GetClause ()
    {
        return _clause_;
    }

    public void SetClause (PClause node)
    {
        if(_clause_ != null)
        {
            _clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _clause_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_clause_sequence_)
            + ToString (_clause_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _clause_sequence_ == child )
        {
            _clause_sequence_ = null;
            return;
        }
        if ( _clause_ == child )
        {
            _clause_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _clause_sequence_ == oldChild )
        {
            SetClauseSequence ((PClauseSequence) newChild);
            return;
        }
        if ( _clause_ == oldChild )
        {
            SetClause ((PClause) newChild);
            return;
        }
    }

}
public sealed class ABlankWhenZeroClauseClause : PClause
{
    private PBlankWhenZeroClause _blank_when_zero_clause_;

    public ABlankWhenZeroClauseClause ()
    {
    }

    public ABlankWhenZeroClauseClause (
            PBlankWhenZeroClause _blank_when_zero_clause_
    )
    {
        SetBlankWhenZeroClause (_blank_when_zero_clause_);
    }

    public override Object Clone()
    {
        return new ABlankWhenZeroClauseClause (
            (PBlankWhenZeroClause)CloneNode (_blank_when_zero_clause_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABlankWhenZeroClauseClause(this);
    }

    public PBlankWhenZeroClause GetBlankWhenZeroClause ()
    {
        return _blank_when_zero_clause_;
    }

    public void SetBlankWhenZeroClause (PBlankWhenZeroClause node)
    {
        if(_blank_when_zero_clause_ != null)
        {
            _blank_when_zero_clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _blank_when_zero_clause_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_blank_when_zero_clause_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _blank_when_zero_clause_ == child )
        {
            _blank_when_zero_clause_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _blank_when_zero_clause_ == oldChild )
        {
            SetBlankWhenZeroClause ((PBlankWhenZeroClause) newChild);
            return;
        }
    }

}
public sealed class ADateFormatClauseClause : PClause
{
    private PDateFormatClause _date_format_clause_;

    public ADateFormatClauseClause ()
    {
    }

    public ADateFormatClauseClause (
            PDateFormatClause _date_format_clause_
    )
    {
        SetDateFormatClause (_date_format_clause_);
    }

    public override Object Clone()
    {
        return new ADateFormatClauseClause (
            (PDateFormatClause)CloneNode (_date_format_clause_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADateFormatClauseClause(this);
    }

    public PDateFormatClause GetDateFormatClause ()
    {
        return _date_format_clause_;
    }

    public void SetDateFormatClause (PDateFormatClause node)
    {
        if(_date_format_clause_ != null)
        {
            _date_format_clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _date_format_clause_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_date_format_clause_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _date_format_clause_ == child )
        {
            _date_format_clause_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _date_format_clause_ == oldChild )
        {
            SetDateFormatClause ((PDateFormatClause) newChild);
            return;
        }
    }

}
public sealed class AExternalClauseClause : PClause
{
    private PExternalClause _external_clause_;

    public AExternalClauseClause ()
    {
    }

    public AExternalClauseClause (
            PExternalClause _external_clause_
    )
    {
        SetExternalClause (_external_clause_);
    }

    public override Object Clone()
    {
        return new AExternalClauseClause (
            (PExternalClause)CloneNode (_external_clause_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExternalClauseClause(this);
    }

    public PExternalClause GetExternalClause ()
    {
        return _external_clause_;
    }

    public void SetExternalClause (PExternalClause node)
    {
        if(_external_clause_ != null)
        {
            _external_clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _external_clause_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_external_clause_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _external_clause_ == child )
        {
            _external_clause_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _external_clause_ == oldChild )
        {
            SetExternalClause ((PExternalClause) newChild);
            return;
        }
    }

}
public sealed class AGlobalClauseClause : PClause
{
    private PGlobalClause _global_clause_;

    public AGlobalClauseClause ()
    {
    }

    public AGlobalClauseClause (
            PGlobalClause _global_clause_
    )
    {
        SetGlobalClause (_global_clause_);
    }

    public override Object Clone()
    {
        return new AGlobalClauseClause (
            (PGlobalClause)CloneNode (_global_clause_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGlobalClauseClause(this);
    }

    public PGlobalClause GetGlobalClause ()
    {
        return _global_clause_;
    }

    public void SetGlobalClause (PGlobalClause node)
    {
        if(_global_clause_ != null)
        {
            _global_clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _global_clause_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_global_clause_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _global_clause_ == child )
        {
            _global_clause_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _global_clause_ == oldChild )
        {
            SetGlobalClause ((PGlobalClause) newChild);
            return;
        }
    }

}
public sealed class AJustifiedClauseClause : PClause
{
    private PJustifiedClause _justified_clause_;

    public AJustifiedClauseClause ()
    {
    }

    public AJustifiedClauseClause (
            PJustifiedClause _justified_clause_
    )
    {
        SetJustifiedClause (_justified_clause_);
    }

    public override Object Clone()
    {
        return new AJustifiedClauseClause (
            (PJustifiedClause)CloneNode (_justified_clause_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAJustifiedClauseClause(this);
    }

    public PJustifiedClause GetJustifiedClause ()
    {
        return _justified_clause_;
    }

    public void SetJustifiedClause (PJustifiedClause node)
    {
        if(_justified_clause_ != null)
        {
            _justified_clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _justified_clause_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_justified_clause_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _justified_clause_ == child )
        {
            _justified_clause_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _justified_clause_ == oldChild )
        {
            SetJustifiedClause ((PJustifiedClause) newChild);
            return;
        }
    }

}
public sealed class AOccursClauseClause : PClause
{
    private POccursClause _occurs_clause_;

    public AOccursClauseClause ()
    {
    }

    public AOccursClauseClause (
            POccursClause _occurs_clause_
    )
    {
        SetOccursClause (_occurs_clause_);
    }

    public override Object Clone()
    {
        return new AOccursClauseClause (
            (POccursClause)CloneNode (_occurs_clause_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOccursClauseClause(this);
    }

    public POccursClause GetOccursClause ()
    {
        return _occurs_clause_;
    }

    public void SetOccursClause (POccursClause node)
    {
        if(_occurs_clause_ != null)
        {
            _occurs_clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _occurs_clause_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_occurs_clause_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _occurs_clause_ == child )
        {
            _occurs_clause_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _occurs_clause_ == oldChild )
        {
            SetOccursClause ((POccursClause) newChild);
            return;
        }
    }

}
public sealed class APictureClauseClause : PClause
{
    private PPictureClause _picture_clause_;

    public APictureClauseClause ()
    {
    }

    public APictureClauseClause (
            PPictureClause _picture_clause_
    )
    {
        SetPictureClause (_picture_clause_);
    }

    public override Object Clone()
    {
        return new APictureClauseClause (
            (PPictureClause)CloneNode (_picture_clause_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPictureClauseClause(this);
    }

    public PPictureClause GetPictureClause ()
    {
        return _picture_clause_;
    }

    public void SetPictureClause (PPictureClause node)
    {
        if(_picture_clause_ != null)
        {
            _picture_clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _picture_clause_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_picture_clause_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _picture_clause_ == child )
        {
            _picture_clause_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _picture_clause_ == oldChild )
        {
            SetPictureClause ((PPictureClause) newChild);
            return;
        }
    }

}
public sealed class ASignClauseClause : PClause
{
    private PSignClause _sign_clause_;

    public ASignClauseClause ()
    {
    }

    public ASignClauseClause (
            PSignClause _sign_clause_
    )
    {
        SetSignClause (_sign_clause_);
    }

    public override Object Clone()
    {
        return new ASignClauseClause (
            (PSignClause)CloneNode (_sign_clause_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASignClauseClause(this);
    }

    public PSignClause GetSignClause ()
    {
        return _sign_clause_;
    }

    public void SetSignClause (PSignClause node)
    {
        if(_sign_clause_ != null)
        {
            _sign_clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _sign_clause_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_sign_clause_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _sign_clause_ == child )
        {
            _sign_clause_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _sign_clause_ == oldChild )
        {
            SetSignClause ((PSignClause) newChild);
            return;
        }
    }

}
public sealed class ASynchronizedClauseClause : PClause
{
    private PSynchronizedClause _synchronized_clause_;

    public ASynchronizedClauseClause ()
    {
    }

    public ASynchronizedClauseClause (
            PSynchronizedClause _synchronized_clause_
    )
    {
        SetSynchronizedClause (_synchronized_clause_);
    }

    public override Object Clone()
    {
        return new ASynchronizedClauseClause (
            (PSynchronizedClause)CloneNode (_synchronized_clause_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASynchronizedClauseClause(this);
    }

    public PSynchronizedClause GetSynchronizedClause ()
    {
        return _synchronized_clause_;
    }

    public void SetSynchronizedClause (PSynchronizedClause node)
    {
        if(_synchronized_clause_ != null)
        {
            _synchronized_clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _synchronized_clause_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_synchronized_clause_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _synchronized_clause_ == child )
        {
            _synchronized_clause_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _synchronized_clause_ == oldChild )
        {
            SetSynchronizedClause ((PSynchronizedClause) newChild);
            return;
        }
    }

}
public sealed class AUsageClauseClause : PClause
{
    private PUsageClause _usage_clause_;

    public AUsageClauseClause ()
    {
    }

    public AUsageClauseClause (
            PUsageClause _usage_clause_
    )
    {
        SetUsageClause (_usage_clause_);
    }

    public override Object Clone()
    {
        return new AUsageClauseClause (
            (PUsageClause)CloneNode (_usage_clause_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUsageClauseClause(this);
    }

    public PUsageClause GetUsageClause ()
    {
        return _usage_clause_;
    }

    public void SetUsageClause (PUsageClause node)
    {
        if(_usage_clause_ != null)
        {
            _usage_clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _usage_clause_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_usage_clause_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _usage_clause_ == child )
        {
            _usage_clause_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _usage_clause_ == oldChild )
        {
            SetUsageClause ((PUsageClause) newChild);
            return;
        }
    }

}
public sealed class AValueClauseClause : PClause
{
    private PValueClause _value_clause_;

    public AValueClauseClause ()
    {
    }

    public AValueClauseClause (
            PValueClause _value_clause_
    )
    {
        SetValueClause (_value_clause_);
    }

    public override Object Clone()
    {
        return new AValueClauseClause (
            (PValueClause)CloneNode (_value_clause_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAValueClauseClause(this);
    }

    public PValueClause GetValueClause ()
    {
        return _value_clause_;
    }

    public void SetValueClause (PValueClause node)
    {
        if(_value_clause_ != null)
        {
            _value_clause_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_clause_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_value_clause_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _value_clause_ == child )
        {
            _value_clause_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _value_clause_ == oldChild )
        {
            SetValueClause ((PValueClause) newChild);
            return;
        }
    }

}
public sealed class ABlankWhenZeroClause : PBlankWhenZeroClause
{
    private TBlank _blank_;
    private TWhen _when_;
    private TZeros _zeros_;

    public ABlankWhenZeroClause ()
    {
    }

    public ABlankWhenZeroClause (
            TBlank _blank_,
            TWhen _when_,
            TZeros _zeros_
    )
    {
        SetBlank (_blank_);
        SetWhen (_when_);
        SetZeros (_zeros_);
    }

    public override Object Clone()
    {
        return new ABlankWhenZeroClause (
            (TBlank)CloneNode (_blank_),
            (TWhen)CloneNode (_when_),
            (TZeros)CloneNode (_zeros_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABlankWhenZeroClause(this);
    }

    public TBlank GetBlank ()
    {
        return _blank_;
    }

    public void SetBlank (TBlank node)
    {
        if(_blank_ != null)
        {
            _blank_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _blank_ = node;
    }
    public TWhen GetWhen ()
    {
        return _when_;
    }

    public void SetWhen (TWhen node)
    {
        if(_when_ != null)
        {
            _when_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _when_ = node;
    }
    public TZeros GetZeros ()
    {
        return _zeros_;
    }

    public void SetZeros (TZeros node)
    {
        if(_zeros_ != null)
        {
            _zeros_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _zeros_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_blank_)
            + ToString (_when_)
            + ToString (_zeros_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _blank_ == child )
        {
            _blank_ = null;
            return;
        }
        if ( _when_ == child )
        {
            _when_ = null;
            return;
        }
        if ( _zeros_ == child )
        {
            _zeros_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _blank_ == oldChild )
        {
            SetBlank ((TBlank) newChild);
            return;
        }
        if ( _when_ == oldChild )
        {
            SetWhen ((TWhen) newChild);
            return;
        }
        if ( _zeros_ == oldChild )
        {
            SetZeros ((TZeros) newChild);
            return;
        }
    }

}
public sealed class ADateFormatClause : PDateFormatClause
{
    private TDate _date_;
    private TFormat _format_;
    private TIs _is_;
    private TDataName _data_name_;

    public ADateFormatClause ()
    {
    }

    public ADateFormatClause (
            TDate _date_,
            TFormat _format_,
            TIs _is_,
            TDataName _data_name_
    )
    {
        SetDate (_date_);
        SetFormat (_format_);
        SetIs (_is_);
        SetDataName (_data_name_);
    }

    public override Object Clone()
    {
        return new ADateFormatClause (
            (TDate)CloneNode (_date_),
            (TFormat)CloneNode (_format_),
            (TIs)CloneNode (_is_),
            (TDataName)CloneNode (_data_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADateFormatClause(this);
    }

    public TDate GetDate ()
    {
        return _date_;
    }

    public void SetDate (TDate node)
    {
        if(_date_ != null)
        {
            _date_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _date_ = node;
    }
    public TFormat GetFormat ()
    {
        return _format_;
    }

    public void SetFormat (TFormat node)
    {
        if(_format_ != null)
        {
            _format_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _format_ = node;
    }
    public TIs GetIs ()
    {
        return _is_;
    }

    public void SetIs (TIs node)
    {
        if(_is_ != null)
        {
            _is_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _is_ = node;
    }
    public TDataName GetDataName ()
    {
        return _data_name_;
    }

    public void SetDataName (TDataName node)
    {
        if(_data_name_ != null)
        {
            _data_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _data_name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_date_)
            + ToString (_format_)
            + ToString (_is_)
            + ToString (_data_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _date_ == child )
        {
            _date_ = null;
            return;
        }
        if ( _format_ == child )
        {
            _format_ = null;
            return;
        }
        if ( _is_ == child )
        {
            _is_ = null;
            return;
        }
        if ( _data_name_ == child )
        {
            _data_name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _date_ == oldChild )
        {
            SetDate ((TDate) newChild);
            return;
        }
        if ( _format_ == oldChild )
        {
            SetFormat ((TFormat) newChild);
            return;
        }
        if ( _is_ == oldChild )
        {
            SetIs ((TIs) newChild);
            return;
        }
        if ( _data_name_ == oldChild )
        {
            SetDataName ((TDataName) newChild);
            return;
        }
    }

}
public sealed class AExternalClause : PExternalClause
{
    private TExternal _external_;

    public AExternalClause ()
    {
    }

    public AExternalClause (
            TExternal _external_
    )
    {
        SetExternal (_external_);
    }

    public override Object Clone()
    {
        return new AExternalClause (
            (TExternal)CloneNode (_external_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExternalClause(this);
    }

    public TExternal GetExternal ()
    {
        return _external_;
    }

    public void SetExternal (TExternal node)
    {
        if(_external_ != null)
        {
            _external_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _external_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_external_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _external_ == child )
        {
            _external_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _external_ == oldChild )
        {
            SetExternal ((TExternal) newChild);
            return;
        }
    }

}
public sealed class AGlobalClause : PGlobalClause
{
    private TGlobal _global_;

    public AGlobalClause ()
    {
    }

    public AGlobalClause (
            TGlobal _global_
    )
    {
        SetGlobal (_global_);
    }

    public override Object Clone()
    {
        return new AGlobalClause (
            (TGlobal)CloneNode (_global_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGlobalClause(this);
    }

    public TGlobal GetGlobal ()
    {
        return _global_;
    }

    public void SetGlobal (TGlobal node)
    {
        if(_global_ != null)
        {
            _global_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _global_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_global_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _global_ == child )
        {
            _global_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _global_ == oldChild )
        {
            SetGlobal ((TGlobal) newChild);
            return;
        }
    }

}
public sealed class AJustifiedClause : PJustifiedClause
{
    private TJustified _justified_;
    private TRight _right_;

    public AJustifiedClause ()
    {
    }

    public AJustifiedClause (
            TJustified _justified_,
            TRight _right_
    )
    {
        SetJustified (_justified_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AJustifiedClause (
            (TJustified)CloneNode (_justified_),
            (TRight)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAJustifiedClause(this);
    }

    public TJustified GetJustified ()
    {
        return _justified_;
    }

    public void SetJustified (TJustified node)
    {
        if(_justified_ != null)
        {
            _justified_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _justified_ = node;
    }
    public TRight GetRight ()
    {
        return _right_;
    }

    public void SetRight (TRight node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_justified_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _justified_ == child )
        {
            _justified_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _justified_ == oldChild )
        {
            SetJustified ((TJustified) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((TRight) newChild);
            return;
        }
    }

}
public sealed class AOccursClause : POccursClause
{
    private POccursFixedOrVariable _occurs_fixed_or_variable_;
    private TypedList _ascending_or_descending_key_phrase_;
    private TypedList _indexed_by_phrase_;

    public AOccursClause ()
    {
        this._ascending_or_descending_key_phrase_ = new TypedList(new AscendingOrDescendingKeyPhrase_Cast(this));
        this._indexed_by_phrase_ = new TypedList(new IndexedByPhrase_Cast(this));
    }

    public AOccursClause (
            POccursFixedOrVariable _occurs_fixed_or_variable_,
            IList _ascending_or_descending_key_phrase_,
            IList _indexed_by_phrase_
    )
    {
        SetOccursFixedOrVariable (_occurs_fixed_or_variable_);
        this._ascending_or_descending_key_phrase_ = new TypedList(new AscendingOrDescendingKeyPhrase_Cast(this));
        this._ascending_or_descending_key_phrase_.Clear();
        this._ascending_or_descending_key_phrase_.AddAll(_ascending_or_descending_key_phrase_);
        this._indexed_by_phrase_ = new TypedList(new IndexedByPhrase_Cast(this));
        this._indexed_by_phrase_.Clear();
        this._indexed_by_phrase_.AddAll(_indexed_by_phrase_);
    }

    public override Object Clone()
    {
        return new AOccursClause (
            (POccursFixedOrVariable)CloneNode (_occurs_fixed_or_variable_),
            CloneList (_ascending_or_descending_key_phrase_),
            CloneList (_indexed_by_phrase_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOccursClause(this);
    }

    public POccursFixedOrVariable GetOccursFixedOrVariable ()
    {
        return _occurs_fixed_or_variable_;
    }

    public void SetOccursFixedOrVariable (POccursFixedOrVariable node)
    {
        if(_occurs_fixed_or_variable_ != null)
        {
            _occurs_fixed_or_variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _occurs_fixed_or_variable_ = node;
    }
    public IList GetAscendingOrDescendingKeyPhrase ()
    {
        return _ascending_or_descending_key_phrase_;
    }

    public void setAscendingOrDescendingKeyPhrase (IList list)
    {
        _ascending_or_descending_key_phrase_.Clear();
        _ascending_or_descending_key_phrase_.AddAll(list);
    }
    public IList GetIndexedByPhrase ()
    {
        return _indexed_by_phrase_;
    }

    public void setIndexedByPhrase (IList list)
    {
        _indexed_by_phrase_.Clear();
        _indexed_by_phrase_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_occurs_fixed_or_variable_)
            + ToString (_ascending_or_descending_key_phrase_)
            + ToString (_indexed_by_phrase_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _occurs_fixed_or_variable_ == child )
        {
            _occurs_fixed_or_variable_ = null;
            return;
        }
        if ( _ascending_or_descending_key_phrase_.Contains(child) )
        {
            _ascending_or_descending_key_phrase_.Remove(child);
            return;
        }
        if ( _indexed_by_phrase_.Contains(child) )
        {
            _indexed_by_phrase_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _occurs_fixed_or_variable_ == oldChild )
        {
            SetOccursFixedOrVariable ((POccursFixedOrVariable) newChild);
            return;
        }
        for ( int i = 0; i < _ascending_or_descending_key_phrase_.Count; i++ )
        {
            Node n = (Node)_ascending_or_descending_key_phrase_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _ascending_or_descending_key_phrase_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _ascending_or_descending_key_phrase_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _indexed_by_phrase_.Count; i++ )
        {
            Node n = (Node)_indexed_by_phrase_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _indexed_by_phrase_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _indexed_by_phrase_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class AscendingOrDescendingKeyPhrase_Cast : Cast
    {
        AOccursClause obj;

        internal AscendingOrDescendingKeyPhrase_Cast (AOccursClause obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PAscendingOrDescendingKeyPhrase node = (PAscendingOrDescendingKeyPhrase) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PAscendingOrDescendingKeyPhrase node = (PAscendingOrDescendingKeyPhrase) o;
            node.Parent(null);
            return node;
        }
    }
    private class IndexedByPhrase_Cast : Cast
    {
        AOccursClause obj;

        internal IndexedByPhrase_Cast (AOccursClause obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PIndexedByPhrase node = (PIndexedByPhrase) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PIndexedByPhrase node = (PIndexedByPhrase) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AFixedOccursFixedOrVariable : POccursFixedOrVariable
{
    private TOccurs _occurs_;
    private PNumber _number_;
    private TTimes _times_;

    public AFixedOccursFixedOrVariable ()
    {
    }

    public AFixedOccursFixedOrVariable (
            TOccurs _occurs_,
            PNumber _number_,
            TTimes _times_
    )
    {
        SetOccurs (_occurs_);
        SetNumber (_number_);
        SetTimes (_times_);
    }

    public override Object Clone()
    {
        return new AFixedOccursFixedOrVariable (
            (TOccurs)CloneNode (_occurs_),
            (PNumber)CloneNode (_number_),
            (TTimes)CloneNode (_times_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFixedOccursFixedOrVariable(this);
    }

    public TOccurs GetOccurs ()
    {
        return _occurs_;
    }

    public void SetOccurs (TOccurs node)
    {
        if(_occurs_ != null)
        {
            _occurs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _occurs_ = node;
    }
    public PNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (PNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }
    public TTimes GetTimes ()
    {
        return _times_;
    }

    public void SetTimes (TTimes node)
    {
        if(_times_ != null)
        {
            _times_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _times_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_occurs_)
            + ToString (_number_)
            + ToString (_times_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _occurs_ == child )
        {
            _occurs_ = null;
            return;
        }
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
        if ( _times_ == child )
        {
            _times_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _occurs_ == oldChild )
        {
            SetOccurs ((TOccurs) newChild);
            return;
        }
        if ( _number_ == oldChild )
        {
            SetNumber ((PNumber) newChild);
            return;
        }
        if ( _times_ == oldChild )
        {
            SetTimes ((TTimes) newChild);
            return;
        }
    }

}
public sealed class AVariableOccursFixedOrVariable : POccursFixedOrVariable
{
    private TOccurs _occurs_;
    private POccursTo _occurs_to_;
    private PNumber _number_;
    private TTimes _times_;
    private TDepending _depending_;
    private TOn _on_;
    private TDataName _data_name_;

    public AVariableOccursFixedOrVariable ()
    {
    }

    public AVariableOccursFixedOrVariable (
            TOccurs _occurs_,
            POccursTo _occurs_to_,
            PNumber _number_,
            TTimes _times_,
            TDepending _depending_,
            TOn _on_,
            TDataName _data_name_
    )
    {
        SetOccurs (_occurs_);
        SetOccursTo (_occurs_to_);
        SetNumber (_number_);
        SetTimes (_times_);
        SetDepending (_depending_);
        SetOn (_on_);
        SetDataName (_data_name_);
    }

    public override Object Clone()
    {
        return new AVariableOccursFixedOrVariable (
            (TOccurs)CloneNode (_occurs_),
            (POccursTo)CloneNode (_occurs_to_),
            (PNumber)CloneNode (_number_),
            (TTimes)CloneNode (_times_),
            (TDepending)CloneNode (_depending_),
            (TOn)CloneNode (_on_),
            (TDataName)CloneNode (_data_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableOccursFixedOrVariable(this);
    }

    public TOccurs GetOccurs ()
    {
        return _occurs_;
    }

    public void SetOccurs (TOccurs node)
    {
        if(_occurs_ != null)
        {
            _occurs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _occurs_ = node;
    }
    public POccursTo GetOccursTo ()
    {
        return _occurs_to_;
    }

    public void SetOccursTo (POccursTo node)
    {
        if(_occurs_to_ != null)
        {
            _occurs_to_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _occurs_to_ = node;
    }
    public PNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (PNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }
    public TTimes GetTimes ()
    {
        return _times_;
    }

    public void SetTimes (TTimes node)
    {
        if(_times_ != null)
        {
            _times_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _times_ = node;
    }
    public TDepending GetDepending ()
    {
        return _depending_;
    }

    public void SetDepending (TDepending node)
    {
        if(_depending_ != null)
        {
            _depending_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _depending_ = node;
    }
    public TOn GetOn ()
    {
        return _on_;
    }

    public void SetOn (TOn node)
    {
        if(_on_ != null)
        {
            _on_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _on_ = node;
    }
    public TDataName GetDataName ()
    {
        return _data_name_;
    }

    public void SetDataName (TDataName node)
    {
        if(_data_name_ != null)
        {
            _data_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _data_name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_occurs_)
            + ToString (_occurs_to_)
            + ToString (_number_)
            + ToString (_times_)
            + ToString (_depending_)
            + ToString (_on_)
            + ToString (_data_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _occurs_ == child )
        {
            _occurs_ = null;
            return;
        }
        if ( _occurs_to_ == child )
        {
            _occurs_to_ = null;
            return;
        }
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
        if ( _times_ == child )
        {
            _times_ = null;
            return;
        }
        if ( _depending_ == child )
        {
            _depending_ = null;
            return;
        }
        if ( _on_ == child )
        {
            _on_ = null;
            return;
        }
        if ( _data_name_ == child )
        {
            _data_name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _occurs_ == oldChild )
        {
            SetOccurs ((TOccurs) newChild);
            return;
        }
        if ( _occurs_to_ == oldChild )
        {
            SetOccursTo ((POccursTo) newChild);
            return;
        }
        if ( _number_ == oldChild )
        {
            SetNumber ((PNumber) newChild);
            return;
        }
        if ( _times_ == oldChild )
        {
            SetTimes ((TTimes) newChild);
            return;
        }
        if ( _depending_ == oldChild )
        {
            SetDepending ((TDepending) newChild);
            return;
        }
        if ( _on_ == oldChild )
        {
            SetOn ((TOn) newChild);
            return;
        }
        if ( _data_name_ == oldChild )
        {
            SetDataName ((TDataName) newChild);
            return;
        }
    }

}
public sealed class AOccursTo : POccursTo
{
    private PNumber _number_;
    private TTo _to_;

    public AOccursTo ()
    {
    }

    public AOccursTo (
            PNumber _number_,
            TTo _to_
    )
    {
        SetNumber (_number_);
        SetTo (_to_);
    }

    public override Object Clone()
    {
        return new AOccursTo (
            (PNumber)CloneNode (_number_),
            (TTo)CloneNode (_to_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOccursTo(this);
    }

    public PNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (PNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }
    public TTo GetTo ()
    {
        return _to_;
    }

    public void SetTo (TTo node)
    {
        if(_to_ != null)
        {
            _to_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _to_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_)
            + ToString (_to_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
        if ( _to_ == child )
        {
            _to_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_ == oldChild )
        {
            SetNumber ((PNumber) newChild);
            return;
        }
        if ( _to_ == oldChild )
        {
            SetTo ((TTo) newChild);
            return;
        }
    }

}
public sealed class AAscendingOrDescendingKeyPhrase : PAscendingOrDescendingKeyPhrase
{
    private PAscendingOrDescending _ascending_or_descending_;
    private TKey _key_;
    private TIs _is_;
    private TypedList _data_name_;

    public AAscendingOrDescendingKeyPhrase ()
    {
        this._data_name_ = new TypedList(new DataName_Cast(this));
    }

    public AAscendingOrDescendingKeyPhrase (
            PAscendingOrDescending _ascending_or_descending_,
            TKey _key_,
            TIs _is_,
            IList _data_name_
    )
    {
        SetAscendingOrDescending (_ascending_or_descending_);
        SetKey (_key_);
        SetIs (_is_);
        this._data_name_ = new TypedList(new DataName_Cast(this));
        this._data_name_.Clear();
        this._data_name_.AddAll(_data_name_);
    }

    public override Object Clone()
    {
        return new AAscendingOrDescendingKeyPhrase (
            (PAscendingOrDescending)CloneNode (_ascending_or_descending_),
            (TKey)CloneNode (_key_),
            (TIs)CloneNode (_is_),
            CloneList (_data_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAscendingOrDescendingKeyPhrase(this);
    }

    public PAscendingOrDescending GetAscendingOrDescending ()
    {
        return _ascending_or_descending_;
    }

    public void SetAscendingOrDescending (PAscendingOrDescending node)
    {
        if(_ascending_or_descending_ != null)
        {
            _ascending_or_descending_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ascending_or_descending_ = node;
    }
    public TKey GetKey ()
    {
        return _key_;
    }

    public void SetKey (TKey node)
    {
        if(_key_ != null)
        {
            _key_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _key_ = node;
    }
    public TIs GetIs ()
    {
        return _is_;
    }

    public void SetIs (TIs node)
    {
        if(_is_ != null)
        {
            _is_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _is_ = node;
    }
    public IList GetDataName ()
    {
        return _data_name_;
    }

    public void setDataName (IList list)
    {
        _data_name_.Clear();
        _data_name_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_ascending_or_descending_)
            + ToString (_key_)
            + ToString (_is_)
            + ToString (_data_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ascending_or_descending_ == child )
        {
            _ascending_or_descending_ = null;
            return;
        }
        if ( _key_ == child )
        {
            _key_ = null;
            return;
        }
        if ( _is_ == child )
        {
            _is_ = null;
            return;
        }
        if ( _data_name_.Contains(child) )
        {
            _data_name_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ascending_or_descending_ == oldChild )
        {
            SetAscendingOrDescending ((PAscendingOrDescending) newChild);
            return;
        }
        if ( _key_ == oldChild )
        {
            SetKey ((TKey) newChild);
            return;
        }
        if ( _is_ == oldChild )
        {
            SetIs ((TIs) newChild);
            return;
        }
        for ( int i = 0; i < _data_name_.Count; i++ )
        {
            Node n = (Node)_data_name_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _data_name_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _data_name_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class DataName_Cast : Cast
    {
        AAscendingOrDescendingKeyPhrase obj;

        internal DataName_Cast (AAscendingOrDescendingKeyPhrase obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TDataName node = (TDataName) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TDataName node = (TDataName) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AAscendingAscendingOrDescending : PAscendingOrDescending
{
    private TAscending _ascending_;

    public AAscendingAscendingOrDescending ()
    {
    }

    public AAscendingAscendingOrDescending (
            TAscending _ascending_
    )
    {
        SetAscending (_ascending_);
    }

    public override Object Clone()
    {
        return new AAscendingAscendingOrDescending (
            (TAscending)CloneNode (_ascending_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAscendingAscendingOrDescending(this);
    }

    public TAscending GetAscending ()
    {
        return _ascending_;
    }

    public void SetAscending (TAscending node)
    {
        if(_ascending_ != null)
        {
            _ascending_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ascending_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ascending_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ascending_ == child )
        {
            _ascending_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ascending_ == oldChild )
        {
            SetAscending ((TAscending) newChild);
            return;
        }
    }

}
public sealed class ADescendingAscendingOrDescending : PAscendingOrDescending
{
    private TDescending _descending_;

    public ADescendingAscendingOrDescending ()
    {
    }

    public ADescendingAscendingOrDescending (
            TDescending _descending_
    )
    {
        SetDescending (_descending_);
    }

    public override Object Clone()
    {
        return new ADescendingAscendingOrDescending (
            (TDescending)CloneNode (_descending_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADescendingAscendingOrDescending(this);
    }

    public TDescending GetDescending ()
    {
        return _descending_;
    }

    public void SetDescending (TDescending node)
    {
        if(_descending_ != null)
        {
            _descending_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _descending_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_descending_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _descending_ == child )
        {
            _descending_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _descending_ == oldChild )
        {
            SetDescending ((TDescending) newChild);
            return;
        }
    }

}
public sealed class AIndexedByPhrase : PIndexedByPhrase
{
    private TIndexed _indexed_;
    private TBy _by_;
    private TypedList _data_name_;

    public AIndexedByPhrase ()
    {
        this._data_name_ = new TypedList(new DataName_Cast(this));
    }

    public AIndexedByPhrase (
            TIndexed _indexed_,
            TBy _by_,
            IList _data_name_
    )
    {
        SetIndexed (_indexed_);
        SetBy (_by_);
        this._data_name_ = new TypedList(new DataName_Cast(this));
        this._data_name_.Clear();
        this._data_name_.AddAll(_data_name_);
    }

    public override Object Clone()
    {
        return new AIndexedByPhrase (
            (TIndexed)CloneNode (_indexed_),
            (TBy)CloneNode (_by_),
            CloneList (_data_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIndexedByPhrase(this);
    }

    public TIndexed GetIndexed ()
    {
        return _indexed_;
    }

    public void SetIndexed (TIndexed node)
    {
        if(_indexed_ != null)
        {
            _indexed_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _indexed_ = node;
    }
    public TBy GetBy ()
    {
        return _by_;
    }

    public void SetBy (TBy node)
    {
        if(_by_ != null)
        {
            _by_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _by_ = node;
    }
    public IList GetDataName ()
    {
        return _data_name_;
    }

    public void setDataName (IList list)
    {
        _data_name_.Clear();
        _data_name_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_indexed_)
            + ToString (_by_)
            + ToString (_data_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _indexed_ == child )
        {
            _indexed_ = null;
            return;
        }
        if ( _by_ == child )
        {
            _by_ = null;
            return;
        }
        if ( _data_name_.Contains(child) )
        {
            _data_name_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _indexed_ == oldChild )
        {
            SetIndexed ((TIndexed) newChild);
            return;
        }
        if ( _by_ == oldChild )
        {
            SetBy ((TBy) newChild);
            return;
        }
        for ( int i = 0; i < _data_name_.Count; i++ )
        {
            Node n = (Node)_data_name_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _data_name_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _data_name_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class DataName_Cast : Cast
    {
        AIndexedByPhrase obj;

        internal DataName_Cast (AIndexedByPhrase obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TDataName node = (TDataName) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TDataName node = (TDataName) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class APictureClause : PPictureClause
{
    private TPicture _picture_;
    private TIs _is_;
    private PCharacterString _character_string_;

    public APictureClause ()
    {
    }

    public APictureClause (
            TPicture _picture_,
            TIs _is_,
            PCharacterString _character_string_
    )
    {
        SetPicture (_picture_);
        SetIs (_is_);
        SetCharacterString (_character_string_);
    }

    public override Object Clone()
    {
        return new APictureClause (
            (TPicture)CloneNode (_picture_),
            (TIs)CloneNode (_is_),
            (PCharacterString)CloneNode (_character_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPictureClause(this);
    }

    public TPicture GetPicture ()
    {
        return _picture_;
    }

    public void SetPicture (TPicture node)
    {
        if(_picture_ != null)
        {
            _picture_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _picture_ = node;
    }
    public TIs GetIs ()
    {
        return _is_;
    }

    public void SetIs (TIs node)
    {
        if(_is_ != null)
        {
            _is_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _is_ = node;
    }
    public PCharacterString GetCharacterString ()
    {
        return _character_string_;
    }

    public void SetCharacterString (PCharacterString node)
    {
        if(_character_string_ != null)
        {
            _character_string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _character_string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_picture_)
            + ToString (_is_)
            + ToString (_character_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _picture_ == child )
        {
            _picture_ = null;
            return;
        }
        if ( _is_ == child )
        {
            _is_ = null;
            return;
        }
        if ( _character_string_ == child )
        {
            _character_string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _picture_ == oldChild )
        {
            SetPicture ((TPicture) newChild);
            return;
        }
        if ( _is_ == oldChild )
        {
            SetIs ((TIs) newChild);
            return;
        }
        if ( _character_string_ == oldChild )
        {
            SetCharacterString ((PCharacterString) newChild);
            return;
        }
    }

}
public sealed class ASignClause : PSignClause
{
    private PSignIs _sign_is_;
    private PLeadingOrTrailing _leading_or_trailing_;
    private PSeparateCharacter _separate_character_;

    public ASignClause ()
    {
    }

    public ASignClause (
            PSignIs _sign_is_,
            PLeadingOrTrailing _leading_or_trailing_,
            PSeparateCharacter _separate_character_
    )
    {
        SetSignIs (_sign_is_);
        SetLeadingOrTrailing (_leading_or_trailing_);
        SetSeparateCharacter (_separate_character_);
    }

    public override Object Clone()
    {
        return new ASignClause (
            (PSignIs)CloneNode (_sign_is_),
            (PLeadingOrTrailing)CloneNode (_leading_or_trailing_),
            (PSeparateCharacter)CloneNode (_separate_character_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASignClause(this);
    }

    public PSignIs GetSignIs ()
    {
        return _sign_is_;
    }

    public void SetSignIs (PSignIs node)
    {
        if(_sign_is_ != null)
        {
            _sign_is_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _sign_is_ = node;
    }
    public PLeadingOrTrailing GetLeadingOrTrailing ()
    {
        return _leading_or_trailing_;
    }

    public void SetLeadingOrTrailing (PLeadingOrTrailing node)
    {
        if(_leading_or_trailing_ != null)
        {
            _leading_or_trailing_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leading_or_trailing_ = node;
    }
    public PSeparateCharacter GetSeparateCharacter ()
    {
        return _separate_character_;
    }

    public void SetSeparateCharacter (PSeparateCharacter node)
    {
        if(_separate_character_ != null)
        {
            _separate_character_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _separate_character_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_sign_is_)
            + ToString (_leading_or_trailing_)
            + ToString (_separate_character_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _sign_is_ == child )
        {
            _sign_is_ = null;
            return;
        }
        if ( _leading_or_trailing_ == child )
        {
            _leading_or_trailing_ = null;
            return;
        }
        if ( _separate_character_ == child )
        {
            _separate_character_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _sign_is_ == oldChild )
        {
            SetSignIs ((PSignIs) newChild);
            return;
        }
        if ( _leading_or_trailing_ == oldChild )
        {
            SetLeadingOrTrailing ((PLeadingOrTrailing) newChild);
            return;
        }
        if ( _separate_character_ == oldChild )
        {
            SetSeparateCharacter ((PSeparateCharacter) newChild);
            return;
        }
    }

}
public sealed class ASignIs : PSignIs
{
    private TSign _sign_;
    private TIs _is_;

    public ASignIs ()
    {
    }

    public ASignIs (
            TSign _sign_,
            TIs _is_
    )
    {
        SetSign (_sign_);
        SetIs (_is_);
    }

    public override Object Clone()
    {
        return new ASignIs (
            (TSign)CloneNode (_sign_),
            (TIs)CloneNode (_is_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASignIs(this);
    }

    public TSign GetSign ()
    {
        return _sign_;
    }

    public void SetSign (TSign node)
    {
        if(_sign_ != null)
        {
            _sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _sign_ = node;
    }
    public TIs GetIs ()
    {
        return _is_;
    }

    public void SetIs (TIs node)
    {
        if(_is_ != null)
        {
            _is_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _is_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_sign_)
            + ToString (_is_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _sign_ == child )
        {
            _sign_ = null;
            return;
        }
        if ( _is_ == child )
        {
            _is_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _sign_ == oldChild )
        {
            SetSign ((TSign) newChild);
            return;
        }
        if ( _is_ == oldChild )
        {
            SetIs ((TIs) newChild);
            return;
        }
    }

}
public sealed class ALeadingLeadingOrTrailing : PLeadingOrTrailing
{
    private TLeading _leading_;

    public ALeadingLeadingOrTrailing ()
    {
    }

    public ALeadingLeadingOrTrailing (
            TLeading _leading_
    )
    {
        SetLeading (_leading_);
    }

    public override Object Clone()
    {
        return new ALeadingLeadingOrTrailing (
            (TLeading)CloneNode (_leading_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALeadingLeadingOrTrailing(this);
    }

    public TLeading GetLeading ()
    {
        return _leading_;
    }

    public void SetLeading (TLeading node)
    {
        if(_leading_ != null)
        {
            _leading_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leading_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_leading_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _leading_ == child )
        {
            _leading_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _leading_ == oldChild )
        {
            SetLeading ((TLeading) newChild);
            return;
        }
    }

}
public sealed class ATrailingLeadingOrTrailing : PLeadingOrTrailing
{
    private TTrailing _trailing_;

    public ATrailingLeadingOrTrailing ()
    {
    }

    public ATrailingLeadingOrTrailing (
            TTrailing _trailing_
    )
    {
        SetTrailing (_trailing_);
    }

    public override Object Clone()
    {
        return new ATrailingLeadingOrTrailing (
            (TTrailing)CloneNode (_trailing_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATrailingLeadingOrTrailing(this);
    }

    public TTrailing GetTrailing ()
    {
        return _trailing_;
    }

    public void SetTrailing (TTrailing node)
    {
        if(_trailing_ != null)
        {
            _trailing_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _trailing_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_trailing_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _trailing_ == child )
        {
            _trailing_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _trailing_ == oldChild )
        {
            SetTrailing ((TTrailing) newChild);
            return;
        }
    }

}
public sealed class ASeparateCharacter : PSeparateCharacter
{
    private TSeparate _separate_;
    private TCharacter _character_;

    public ASeparateCharacter ()
    {
    }

    public ASeparateCharacter (
            TSeparate _separate_,
            TCharacter _character_
    )
    {
        SetSeparate (_separate_);
        SetCharacter (_character_);
    }

    public override Object Clone()
    {
        return new ASeparateCharacter (
            (TSeparate)CloneNode (_separate_),
            (TCharacter)CloneNode (_character_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASeparateCharacter(this);
    }

    public TSeparate GetSeparate ()
    {
        return _separate_;
    }

    public void SetSeparate (TSeparate node)
    {
        if(_separate_ != null)
        {
            _separate_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _separate_ = node;
    }
    public TCharacter GetCharacter ()
    {
        return _character_;
    }

    public void SetCharacter (TCharacter node)
    {
        if(_character_ != null)
        {
            _character_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _character_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_separate_)
            + ToString (_character_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _separate_ == child )
        {
            _separate_ = null;
            return;
        }
        if ( _character_ == child )
        {
            _character_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _separate_ == oldChild )
        {
            SetSeparate ((TSeparate) newChild);
            return;
        }
        if ( _character_ == oldChild )
        {
            SetCharacter ((TCharacter) newChild);
            return;
        }
    }

}
public sealed class ASynchronizedClause : PSynchronizedClause
{
    private TSynchronized _synchronized_;
    private PLeftOrRight _left_or_right_;

    public ASynchronizedClause ()
    {
    }

    public ASynchronizedClause (
            TSynchronized _synchronized_,
            PLeftOrRight _left_or_right_
    )
    {
        SetSynchronized (_synchronized_);
        SetLeftOrRight (_left_or_right_);
    }

    public override Object Clone()
    {
        return new ASynchronizedClause (
            (TSynchronized)CloneNode (_synchronized_),
            (PLeftOrRight)CloneNode (_left_or_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASynchronizedClause(this);
    }

    public TSynchronized GetSynchronized ()
    {
        return _synchronized_;
    }

    public void SetSynchronized (TSynchronized node)
    {
        if(_synchronized_ != null)
        {
            _synchronized_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _synchronized_ = node;
    }
    public PLeftOrRight GetLeftOrRight ()
    {
        return _left_or_right_;
    }

    public void SetLeftOrRight (PLeftOrRight node)
    {
        if(_left_or_right_ != null)
        {
            _left_or_right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_or_right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_synchronized_)
            + ToString (_left_or_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _synchronized_ == child )
        {
            _synchronized_ = null;
            return;
        }
        if ( _left_or_right_ == child )
        {
            _left_or_right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _synchronized_ == oldChild )
        {
            SetSynchronized ((TSynchronized) newChild);
            return;
        }
        if ( _left_or_right_ == oldChild )
        {
            SetLeftOrRight ((PLeftOrRight) newChild);
            return;
        }
    }

}
public sealed class ALeftLeftOrRight : PLeftOrRight
{
    private TLeft _left_;

    public ALeftLeftOrRight ()
    {
    }

    public ALeftLeftOrRight (
            TLeft _left_
    )
    {
        SetLeft (_left_);
    }

    public override Object Clone()
    {
        return new ALeftLeftOrRight (
            (TLeft)CloneNode (_left_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALeftLeftOrRight(this);
    }

    public TLeft GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (TLeft node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((TLeft) newChild);
            return;
        }
    }

}
public sealed class ARightLeftOrRight : PLeftOrRight
{
    private TRight _right_;

    public ARightLeftOrRight ()
    {
    }

    public ARightLeftOrRight (
            TRight _right_
    )
    {
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new ARightLeftOrRight (
            (TRight)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARightLeftOrRight(this);
    }

    public TRight GetRight ()
    {
        return _right_;
    }

    public void SetRight (TRight node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _right_ == oldChild )
        {
            SetRight ((TRight) newChild);
            return;
        }
    }

}
public sealed class AUsageClause : PUsageClause
{
    private PUsageIs _usage_is_;
    private PUsagePhrase _usage_phrase_;

    public AUsageClause ()
    {
    }

    public AUsageClause (
            PUsageIs _usage_is_,
            PUsagePhrase _usage_phrase_
    )
    {
        SetUsageIs (_usage_is_);
        SetUsagePhrase (_usage_phrase_);
    }

    public override Object Clone()
    {
        return new AUsageClause (
            (PUsageIs)CloneNode (_usage_is_),
            (PUsagePhrase)CloneNode (_usage_phrase_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUsageClause(this);
    }

    public PUsageIs GetUsageIs ()
    {
        return _usage_is_;
    }

    public void SetUsageIs (PUsageIs node)
    {
        if(_usage_is_ != null)
        {
            _usage_is_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _usage_is_ = node;
    }
    public PUsagePhrase GetUsagePhrase ()
    {
        return _usage_phrase_;
    }

    public void SetUsagePhrase (PUsagePhrase node)
    {
        if(_usage_phrase_ != null)
        {
            _usage_phrase_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _usage_phrase_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_usage_is_)
            + ToString (_usage_phrase_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _usage_is_ == child )
        {
            _usage_is_ = null;
            return;
        }
        if ( _usage_phrase_ == child )
        {
            _usage_phrase_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _usage_is_ == oldChild )
        {
            SetUsageIs ((PUsageIs) newChild);
            return;
        }
        if ( _usage_phrase_ == oldChild )
        {
            SetUsagePhrase ((PUsagePhrase) newChild);
            return;
        }
    }

}
public sealed class AUsageIs : PUsageIs
{
    private TUsage _usage_;
    private TIs _is_;

    public AUsageIs ()
    {
    }

    public AUsageIs (
            TUsage _usage_,
            TIs _is_
    )
    {
        SetUsage (_usage_);
        SetIs (_is_);
    }

    public override Object Clone()
    {
        return new AUsageIs (
            (TUsage)CloneNode (_usage_),
            (TIs)CloneNode (_is_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUsageIs(this);
    }

    public TUsage GetUsage ()
    {
        return _usage_;
    }

    public void SetUsage (TUsage node)
    {
        if(_usage_ != null)
        {
            _usage_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _usage_ = node;
    }
    public TIs GetIs ()
    {
        return _is_;
    }

    public void SetIs (TIs node)
    {
        if(_is_ != null)
        {
            _is_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _is_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_usage_)
            + ToString (_is_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _usage_ == child )
        {
            _usage_ = null;
            return;
        }
        if ( _is_ == child )
        {
            _is_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _usage_ == oldChild )
        {
            SetUsage ((TUsage) newChild);
            return;
        }
        if ( _is_ == oldChild )
        {
            SetIs ((TIs) newChild);
            return;
        }
    }

}
public sealed class ABinaryUsagePhrase : PUsagePhrase
{
    private TBinary _binary_;
    private TNative _native_;

    public ABinaryUsagePhrase ()
    {
    }

    public ABinaryUsagePhrase (
            TBinary _binary_,
            TNative _native_
    )
    {
        SetBinary (_binary_);
        SetNative (_native_);
    }

    public override Object Clone()
    {
        return new ABinaryUsagePhrase (
            (TBinary)CloneNode (_binary_),
            (TNative)CloneNode (_native_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABinaryUsagePhrase(this);
    }

    public TBinary GetBinary ()
    {
        return _binary_;
    }

    public void SetBinary (TBinary node)
    {
        if(_binary_ != null)
        {
            _binary_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _binary_ = node;
    }
    public TNative GetNative ()
    {
        return _native_;
    }

    public void SetNative (TNative node)
    {
        if(_native_ != null)
        {
            _native_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _native_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_binary_)
            + ToString (_native_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _binary_ == child )
        {
            _binary_ = null;
            return;
        }
        if ( _native_ == child )
        {
            _native_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _binary_ == oldChild )
        {
            SetBinary ((TBinary) newChild);
            return;
        }
        if ( _native_ == oldChild )
        {
            SetNative ((TNative) newChild);
            return;
        }
    }

}
public sealed class ACompUsagePhrase : PUsagePhrase
{
    private TComp _comp_;

    public ACompUsagePhrase ()
    {
    }

    public ACompUsagePhrase (
            TComp _comp_
    )
    {
        SetComp (_comp_);
    }

    public override Object Clone()
    {
        return new ACompUsagePhrase (
            (TComp)CloneNode (_comp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACompUsagePhrase(this);
    }

    public TComp GetComp ()
    {
        return _comp_;
    }

    public void SetComp (TComp node)
    {
        if(_comp_ != null)
        {
            _comp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comp_ == child )
        {
            _comp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comp_ == oldChild )
        {
            SetComp ((TComp) newChild);
            return;
        }
    }

}
public sealed class AComp1UsagePhrase : PUsagePhrase
{
    private TComp1 _comp1_;
    private TNative _native_;

    public AComp1UsagePhrase ()
    {
    }

    public AComp1UsagePhrase (
            TComp1 _comp1_,
            TNative _native_
    )
    {
        SetComp1 (_comp1_);
        SetNative (_native_);
    }

    public override Object Clone()
    {
        return new AComp1UsagePhrase (
            (TComp1)CloneNode (_comp1_),
            (TNative)CloneNode (_native_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAComp1UsagePhrase(this);
    }

    public TComp1 GetComp1 ()
    {
        return _comp1_;
    }

    public void SetComp1 (TComp1 node)
    {
        if(_comp1_ != null)
        {
            _comp1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comp1_ = node;
    }
    public TNative GetNative ()
    {
        return _native_;
    }

    public void SetNative (TNative node)
    {
        if(_native_ != null)
        {
            _native_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _native_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comp1_)
            + ToString (_native_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comp1_ == child )
        {
            _comp1_ = null;
            return;
        }
        if ( _native_ == child )
        {
            _native_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comp1_ == oldChild )
        {
            SetComp1 ((TComp1) newChild);
            return;
        }
        if ( _native_ == oldChild )
        {
            SetNative ((TNative) newChild);
            return;
        }
    }

}
public sealed class AComp2UsagePhrase : PUsagePhrase
{
    private TComp2 _comp2_;
    private TNative _native_;

    public AComp2UsagePhrase ()
    {
    }

    public AComp2UsagePhrase (
            TComp2 _comp2_,
            TNative _native_
    )
    {
        SetComp2 (_comp2_);
        SetNative (_native_);
    }

    public override Object Clone()
    {
        return new AComp2UsagePhrase (
            (TComp2)CloneNode (_comp2_),
            (TNative)CloneNode (_native_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAComp2UsagePhrase(this);
    }

    public TComp2 GetComp2 ()
    {
        return _comp2_;
    }

    public void SetComp2 (TComp2 node)
    {
        if(_comp2_ != null)
        {
            _comp2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comp2_ = node;
    }
    public TNative GetNative ()
    {
        return _native_;
    }

    public void SetNative (TNative node)
    {
        if(_native_ != null)
        {
            _native_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _native_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comp2_)
            + ToString (_native_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comp2_ == child )
        {
            _comp2_ = null;
            return;
        }
        if ( _native_ == child )
        {
            _native_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comp2_ == oldChild )
        {
            SetComp2 ((TComp2) newChild);
            return;
        }
        if ( _native_ == oldChild )
        {
            SetNative ((TNative) newChild);
            return;
        }
    }

}
public sealed class AComp3UsagePhrase : PUsagePhrase
{
    private TComp3 _comp3_;

    public AComp3UsagePhrase ()
    {
    }

    public AComp3UsagePhrase (
            TComp3 _comp3_
    )
    {
        SetComp3 (_comp3_);
    }

    public override Object Clone()
    {
        return new AComp3UsagePhrase (
            (TComp3)CloneNode (_comp3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAComp3UsagePhrase(this);
    }

    public TComp3 GetComp3 ()
    {
        return _comp3_;
    }

    public void SetComp3 (TComp3 node)
    {
        if(_comp3_ != null)
        {
            _comp3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comp3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comp3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comp3_ == child )
        {
            _comp3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comp3_ == oldChild )
        {
            SetComp3 ((TComp3) newChild);
            return;
        }
    }

}
public sealed class AComp4UsagePhrase : PUsagePhrase
{
    private TComp4 _comp4_;
    private TNative _native_;

    public AComp4UsagePhrase ()
    {
    }

    public AComp4UsagePhrase (
            TComp4 _comp4_,
            TNative _native_
    )
    {
        SetComp4 (_comp4_);
        SetNative (_native_);
    }

    public override Object Clone()
    {
        return new AComp4UsagePhrase (
            (TComp4)CloneNode (_comp4_),
            (TNative)CloneNode (_native_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAComp4UsagePhrase(this);
    }

    public TComp4 GetComp4 ()
    {
        return _comp4_;
    }

    public void SetComp4 (TComp4 node)
    {
        if(_comp4_ != null)
        {
            _comp4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comp4_ = node;
    }
    public TNative GetNative ()
    {
        return _native_;
    }

    public void SetNative (TNative node)
    {
        if(_native_ != null)
        {
            _native_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _native_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comp4_)
            + ToString (_native_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comp4_ == child )
        {
            _comp4_ = null;
            return;
        }
        if ( _native_ == child )
        {
            _native_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comp4_ == oldChild )
        {
            SetComp4 ((TComp4) newChild);
            return;
        }
        if ( _native_ == oldChild )
        {
            SetNative ((TNative) newChild);
            return;
        }
    }

}
public sealed class AComp5UsagePhrase : PUsagePhrase
{
    private TComp5 _comp5_;

    public AComp5UsagePhrase ()
    {
    }

    public AComp5UsagePhrase (
            TComp5 _comp5_
    )
    {
        SetComp5 (_comp5_);
    }

    public override Object Clone()
    {
        return new AComp5UsagePhrase (
            (TComp5)CloneNode (_comp5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAComp5UsagePhrase(this);
    }

    public TComp5 GetComp5 ()
    {
        return _comp5_;
    }

    public void SetComp5 (TComp5 node)
    {
        if(_comp5_ != null)
        {
            _comp5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comp5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comp5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comp5_ == child )
        {
            _comp5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comp5_ == oldChild )
        {
            SetComp5 ((TComp5) newChild);
            return;
        }
    }

}
public sealed class ADisplayUsagePhrase : PUsagePhrase
{
    private TDisplay _display_;
    private TNative _native_;

    public ADisplayUsagePhrase ()
    {
    }

    public ADisplayUsagePhrase (
            TDisplay _display_,
            TNative _native_
    )
    {
        SetDisplay (_display_);
        SetNative (_native_);
    }

    public override Object Clone()
    {
        return new ADisplayUsagePhrase (
            (TDisplay)CloneNode (_display_),
            (TNative)CloneNode (_native_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADisplayUsagePhrase(this);
    }

    public TDisplay GetDisplay ()
    {
        return _display_;
    }

    public void SetDisplay (TDisplay node)
    {
        if(_display_ != null)
        {
            _display_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _display_ = node;
    }
    public TNative GetNative ()
    {
        return _native_;
    }

    public void SetNative (TNative node)
    {
        if(_native_ != null)
        {
            _native_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _native_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_display_)
            + ToString (_native_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _display_ == child )
        {
            _display_ = null;
            return;
        }
        if ( _native_ == child )
        {
            _native_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _display_ == oldChild )
        {
            SetDisplay ((TDisplay) newChild);
            return;
        }
        if ( _native_ == oldChild )
        {
            SetNative ((TNative) newChild);
            return;
        }
    }

}
public sealed class ADisplay1UsagePhrase : PUsagePhrase
{
    private TDisplay1 _display1_;
    private TNative _native_;

    public ADisplay1UsagePhrase ()
    {
    }

    public ADisplay1UsagePhrase (
            TDisplay1 _display1_,
            TNative _native_
    )
    {
        SetDisplay1 (_display1_);
        SetNative (_native_);
    }

    public override Object Clone()
    {
        return new ADisplay1UsagePhrase (
            (TDisplay1)CloneNode (_display1_),
            (TNative)CloneNode (_native_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADisplay1UsagePhrase(this);
    }

    public TDisplay1 GetDisplay1 ()
    {
        return _display1_;
    }

    public void SetDisplay1 (TDisplay1 node)
    {
        if(_display1_ != null)
        {
            _display1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _display1_ = node;
    }
    public TNative GetNative ()
    {
        return _native_;
    }

    public void SetNative (TNative node)
    {
        if(_native_ != null)
        {
            _native_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _native_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_display1_)
            + ToString (_native_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _display1_ == child )
        {
            _display1_ = null;
            return;
        }
        if ( _native_ == child )
        {
            _native_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _display1_ == oldChild )
        {
            SetDisplay1 ((TDisplay1) newChild);
            return;
        }
        if ( _native_ == oldChild )
        {
            SetNative ((TNative) newChild);
            return;
        }
    }

}
public sealed class AIndexUsagePhrase : PUsagePhrase
{
    private TIndex _index_;

    public AIndexUsagePhrase ()
    {
    }

    public AIndexUsagePhrase (
            TIndex _index_
    )
    {
        SetIndex (_index_);
    }

    public override Object Clone()
    {
        return new AIndexUsagePhrase (
            (TIndex)CloneNode (_index_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIndexUsagePhrase(this);
    }

    public TIndex GetIndex ()
    {
        return _index_;
    }

    public void SetIndex (TIndex node)
    {
        if(_index_ != null)
        {
            _index_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _index_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_index_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _index_ == child )
        {
            _index_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _index_ == oldChild )
        {
            SetIndex ((TIndex) newChild);
            return;
        }
    }

}
public sealed class ANationalUsagePhrase : PUsagePhrase
{
    private TNational _national_;

    public ANationalUsagePhrase ()
    {
    }

    public ANationalUsagePhrase (
            TNational _national_
    )
    {
        SetNational (_national_);
    }

    public override Object Clone()
    {
        return new ANationalUsagePhrase (
            (TNational)CloneNode (_national_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANationalUsagePhrase(this);
    }

    public TNational GetNational ()
    {
        return _national_;
    }

    public void SetNational (TNational node)
    {
        if(_national_ != null)
        {
            _national_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _national_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_national_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _national_ == child )
        {
            _national_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _national_ == oldChild )
        {
            SetNational ((TNational) newChild);
            return;
        }
    }

}
public sealed class AObjectReferencePhraseUsagePhrase : PUsagePhrase
{
    private PObjectReferencePhrase _object_reference_phrase_;

    public AObjectReferencePhraseUsagePhrase ()
    {
    }

    public AObjectReferencePhraseUsagePhrase (
            PObjectReferencePhrase _object_reference_phrase_
    )
    {
        SetObjectReferencePhrase (_object_reference_phrase_);
    }

    public override Object Clone()
    {
        return new AObjectReferencePhraseUsagePhrase (
            (PObjectReferencePhrase)CloneNode (_object_reference_phrase_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAObjectReferencePhraseUsagePhrase(this);
    }

    public PObjectReferencePhrase GetObjectReferencePhrase ()
    {
        return _object_reference_phrase_;
    }

    public void SetObjectReferencePhrase (PObjectReferencePhrase node)
    {
        if(_object_reference_phrase_ != null)
        {
            _object_reference_phrase_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _object_reference_phrase_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_object_reference_phrase_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _object_reference_phrase_ == child )
        {
            _object_reference_phrase_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _object_reference_phrase_ == oldChild )
        {
            SetObjectReferencePhrase ((PObjectReferencePhrase) newChild);
            return;
        }
    }

}
public sealed class APackedDecimalUsagePhrase : PUsagePhrase
{
    private TPackedDecimal _packed_decimal_;

    public APackedDecimalUsagePhrase ()
    {
    }

    public APackedDecimalUsagePhrase (
            TPackedDecimal _packed_decimal_
    )
    {
        SetPackedDecimal (_packed_decimal_);
    }

    public override Object Clone()
    {
        return new APackedDecimalUsagePhrase (
            (TPackedDecimal)CloneNode (_packed_decimal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPackedDecimalUsagePhrase(this);
    }

    public TPackedDecimal GetPackedDecimal ()
    {
        return _packed_decimal_;
    }

    public void SetPackedDecimal (TPackedDecimal node)
    {
        if(_packed_decimal_ != null)
        {
            _packed_decimal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _packed_decimal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_packed_decimal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _packed_decimal_ == child )
        {
            _packed_decimal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _packed_decimal_ == oldChild )
        {
            SetPackedDecimal ((TPackedDecimal) newChild);
            return;
        }
    }

}
public sealed class APointerUsagePhrase : PUsagePhrase
{
    private TPointer _pointer_;

    public APointerUsagePhrase ()
    {
    }

    public APointerUsagePhrase (
            TPointer _pointer_
    )
    {
        SetPointer (_pointer_);
    }

    public override Object Clone()
    {
        return new APointerUsagePhrase (
            (TPointer)CloneNode (_pointer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPointerUsagePhrase(this);
    }

    public TPointer GetPointer ()
    {
        return _pointer_;
    }

    public void SetPointer (TPointer node)
    {
        if(_pointer_ != null)
        {
            _pointer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _pointer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_pointer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _pointer_ == child )
        {
            _pointer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _pointer_ == oldChild )
        {
            SetPointer ((TPointer) newChild);
            return;
        }
    }

}
public sealed class AProcedurePointerUsagePhrase : PUsagePhrase
{
    private TProcedurePointer _procedure_pointer_;

    public AProcedurePointerUsagePhrase ()
    {
    }

    public AProcedurePointerUsagePhrase (
            TProcedurePointer _procedure_pointer_
    )
    {
        SetProcedurePointer (_procedure_pointer_);
    }

    public override Object Clone()
    {
        return new AProcedurePointerUsagePhrase (
            (TProcedurePointer)CloneNode (_procedure_pointer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProcedurePointerUsagePhrase(this);
    }

    public TProcedurePointer GetProcedurePointer ()
    {
        return _procedure_pointer_;
    }

    public void SetProcedurePointer (TProcedurePointer node)
    {
        if(_procedure_pointer_ != null)
        {
            _procedure_pointer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _procedure_pointer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_procedure_pointer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _procedure_pointer_ == child )
        {
            _procedure_pointer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _procedure_pointer_ == oldChild )
        {
            SetProcedurePointer ((TProcedurePointer) newChild);
            return;
        }
    }

}
public sealed class AFunctionPointerUsagePhrase : PUsagePhrase
{
    private TFunctionPointer _function_pointer_;

    public AFunctionPointerUsagePhrase ()
    {
    }

    public AFunctionPointerUsagePhrase (
            TFunctionPointer _function_pointer_
    )
    {
        SetFunctionPointer (_function_pointer_);
    }

    public override Object Clone()
    {
        return new AFunctionPointerUsagePhrase (
            (TFunctionPointer)CloneNode (_function_pointer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionPointerUsagePhrase(this);
    }

    public TFunctionPointer GetFunctionPointer ()
    {
        return _function_pointer_;
    }

    public void SetFunctionPointer (TFunctionPointer node)
    {
        if(_function_pointer_ != null)
        {
            _function_pointer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_pointer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_pointer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_pointer_ == child )
        {
            _function_pointer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_pointer_ == oldChild )
        {
            SetFunctionPointer ((TFunctionPointer) newChild);
            return;
        }
    }

}
public sealed class AObjectReferencePhrase : PObjectReferencePhrase
{
    private TObject _object_;
    private TReference _reference_;
    private TDataName _data_name_;

    public AObjectReferencePhrase ()
    {
    }

    public AObjectReferencePhrase (
            TObject _object_,
            TReference _reference_,
            TDataName _data_name_
    )
    {
        SetObject (_object_);
        SetReference (_reference_);
        SetDataName (_data_name_);
    }

    public override Object Clone()
    {
        return new AObjectReferencePhrase (
            (TObject)CloneNode (_object_),
            (TReference)CloneNode (_reference_),
            (TDataName)CloneNode (_data_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAObjectReferencePhrase(this);
    }

    public TObject GetObject ()
    {
        return _object_;
    }

    public void SetObject (TObject node)
    {
        if(_object_ != null)
        {
            _object_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _object_ = node;
    }
    public TReference GetReference ()
    {
        return _reference_;
    }

    public void SetReference (TReference node)
    {
        if(_reference_ != null)
        {
            _reference_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _reference_ = node;
    }
    public TDataName GetDataName ()
    {
        return _data_name_;
    }

    public void SetDataName (TDataName node)
    {
        if(_data_name_ != null)
        {
            _data_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _data_name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_object_)
            + ToString (_reference_)
            + ToString (_data_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _object_ == child )
        {
            _object_ = null;
            return;
        }
        if ( _reference_ == child )
        {
            _reference_ = null;
            return;
        }
        if ( _data_name_ == child )
        {
            _data_name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _object_ == oldChild )
        {
            SetObject ((TObject) newChild);
            return;
        }
        if ( _reference_ == oldChild )
        {
            SetReference ((TReference) newChild);
            return;
        }
        if ( _data_name_ == oldChild )
        {
            SetDataName ((TDataName) newChild);
            return;
        }
    }

}
public sealed class ARenamesItem : PRenamesItem
{
    private TNumberNot88 _number_not88_;
    private TDataName _rename_to_;
    private TRenames _renames_;
    private TDataName _rename_from_;
    private PThroughPhrase _through_phrase_;

    public ARenamesItem ()
    {
    }

    public ARenamesItem (
            TNumberNot88 _number_not88_,
            TDataName _rename_to_,
            TRenames _renames_,
            TDataName _rename_from_,
            PThroughPhrase _through_phrase_
    )
    {
        SetNumberNot88 (_number_not88_);
        SetRenameTo (_rename_to_);
        SetRenames (_renames_);
        SetRenameFrom (_rename_from_);
        SetThroughPhrase (_through_phrase_);
    }

    public override Object Clone()
    {
        return new ARenamesItem (
            (TNumberNot88)CloneNode (_number_not88_),
            (TDataName)CloneNode (_rename_to_),
            (TRenames)CloneNode (_renames_),
            (TDataName)CloneNode (_rename_from_),
            (PThroughPhrase)CloneNode (_through_phrase_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARenamesItem(this);
    }

    public TNumberNot88 GetNumberNot88 ()
    {
        return _number_not88_;
    }

    public void SetNumberNot88 (TNumberNot88 node)
    {
        if(_number_not88_ != null)
        {
            _number_not88_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_not88_ = node;
    }
    public TDataName GetRenameTo ()
    {
        return _rename_to_;
    }

    public void SetRenameTo (TDataName node)
    {
        if(_rename_to_ != null)
        {
            _rename_to_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rename_to_ = node;
    }
    public TRenames GetRenames ()
    {
        return _renames_;
    }

    public void SetRenames (TRenames node)
    {
        if(_renames_ != null)
        {
            _renames_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _renames_ = node;
    }
    public TDataName GetRenameFrom ()
    {
        return _rename_from_;
    }

    public void SetRenameFrom (TDataName node)
    {
        if(_rename_from_ != null)
        {
            _rename_from_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rename_from_ = node;
    }
    public PThroughPhrase GetThroughPhrase ()
    {
        return _through_phrase_;
    }

    public void SetThroughPhrase (PThroughPhrase node)
    {
        if(_through_phrase_ != null)
        {
            _through_phrase_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _through_phrase_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_not88_)
            + ToString (_rename_to_)
            + ToString (_renames_)
            + ToString (_rename_from_)
            + ToString (_through_phrase_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_not88_ == child )
        {
            _number_not88_ = null;
            return;
        }
        if ( _rename_to_ == child )
        {
            _rename_to_ = null;
            return;
        }
        if ( _renames_ == child )
        {
            _renames_ = null;
            return;
        }
        if ( _rename_from_ == child )
        {
            _rename_from_ = null;
            return;
        }
        if ( _through_phrase_ == child )
        {
            _through_phrase_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_not88_ == oldChild )
        {
            SetNumberNot88 ((TNumberNot88) newChild);
            return;
        }
        if ( _rename_to_ == oldChild )
        {
            SetRenameTo ((TDataName) newChild);
            return;
        }
        if ( _renames_ == oldChild )
        {
            SetRenames ((TRenames) newChild);
            return;
        }
        if ( _rename_from_ == oldChild )
        {
            SetRenameFrom ((TDataName) newChild);
            return;
        }
        if ( _through_phrase_ == oldChild )
        {
            SetThroughPhrase ((PThroughPhrase) newChild);
            return;
        }
    }

}
public sealed class AThroughPhrase : PThroughPhrase
{
    private TThrough _through_;
    private TDataName _data_name_;

    public AThroughPhrase ()
    {
    }

    public AThroughPhrase (
            TThrough _through_,
            TDataName _data_name_
    )
    {
        SetThrough (_through_);
        SetDataName (_data_name_);
    }

    public override Object Clone()
    {
        return new AThroughPhrase (
            (TThrough)CloneNode (_through_),
            (TDataName)CloneNode (_data_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThroughPhrase(this);
    }

    public TThrough GetThrough ()
    {
        return _through_;
    }

    public void SetThrough (TThrough node)
    {
        if(_through_ != null)
        {
            _through_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _through_ = node;
    }
    public TDataName GetDataName ()
    {
        return _data_name_;
    }

    public void SetDataName (TDataName node)
    {
        if(_data_name_ != null)
        {
            _data_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _data_name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_through_)
            + ToString (_data_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _through_ == child )
        {
            _through_ = null;
            return;
        }
        if ( _data_name_ == child )
        {
            _data_name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _through_ == oldChild )
        {
            SetThrough ((TThrough) newChild);
            return;
        }
        if ( _data_name_ == oldChild )
        {
            SetDataName ((TDataName) newChild);
            return;
        }
    }

}
public sealed class AValueClause : PValueClause
{
    private TValue _value_;
    private TIs _is_;
    private TAll _all_;
    private PLiteral _literal_;

    public AValueClause ()
    {
    }

    public AValueClause (
            TValue _value_,
            TIs _is_,
            TAll _all_,
            PLiteral _literal_
    )
    {
        SetValue (_value_);
        SetIs (_is_);
        SetAll (_all_);
        SetLiteral (_literal_);
    }

    public override Object Clone()
    {
        return new AValueClause (
            (TValue)CloneNode (_value_),
            (TIs)CloneNode (_is_),
            (TAll)CloneNode (_all_),
            (PLiteral)CloneNode (_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAValueClause(this);
    }

    public TValue GetValue ()
    {
        return _value_;
    }

    public void SetValue (TValue node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }
    public TIs GetIs ()
    {
        return _is_;
    }

    public void SetIs (TIs node)
    {
        if(_is_ != null)
        {
            _is_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _is_ = node;
    }
    public TAll GetAll ()
    {
        return _all_;
    }

    public void SetAll (TAll node)
    {
        if(_all_ != null)
        {
            _all_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _all_ = node;
    }
    public PLiteral GetLiteral ()
    {
        return _literal_;
    }

    public void SetLiteral (PLiteral node)
    {
        if(_literal_ != null)
        {
            _literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_value_)
            + ToString (_is_)
            + ToString (_all_)
            + ToString (_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
        if ( _is_ == child )
        {
            _is_ = null;
            return;
        }
        if ( _all_ == child )
        {
            _all_ = null;
            return;
        }
        if ( _literal_ == child )
        {
            _literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _value_ == oldChild )
        {
            SetValue ((TValue) newChild);
            return;
        }
        if ( _is_ == oldChild )
        {
            SetIs ((TIs) newChild);
            return;
        }
        if ( _all_ == oldChild )
        {
            SetAll ((TAll) newChild);
            return;
        }
        if ( _literal_ == oldChild )
        {
            SetLiteral ((PLiteral) newChild);
            return;
        }
    }

}
public sealed class AValueItem : PValueItem
{
    private TNumber88 _number88_;
    private TDataName _data_name_;
    private PValueOrValues _value_or_values_;
    private PLiteralSequence _literal_sequence_;

    public AValueItem ()
    {
    }

    public AValueItem (
            TNumber88 _number88_,
            TDataName _data_name_,
            PValueOrValues _value_or_values_,
            PLiteralSequence _literal_sequence_
    )
    {
        SetNumber88 (_number88_);
        SetDataName (_data_name_);
        SetValueOrValues (_value_or_values_);
        SetLiteralSequence (_literal_sequence_);
    }

    public override Object Clone()
    {
        return new AValueItem (
            (TNumber88)CloneNode (_number88_),
            (TDataName)CloneNode (_data_name_),
            (PValueOrValues)CloneNode (_value_or_values_),
            (PLiteralSequence)CloneNode (_literal_sequence_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAValueItem(this);
    }

    public TNumber88 GetNumber88 ()
    {
        return _number88_;
    }

    public void SetNumber88 (TNumber88 node)
    {
        if(_number88_ != null)
        {
            _number88_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number88_ = node;
    }
    public TDataName GetDataName ()
    {
        return _data_name_;
    }

    public void SetDataName (TDataName node)
    {
        if(_data_name_ != null)
        {
            _data_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _data_name_ = node;
    }
    public PValueOrValues GetValueOrValues ()
    {
        return _value_or_values_;
    }

    public void SetValueOrValues (PValueOrValues node)
    {
        if(_value_or_values_ != null)
        {
            _value_or_values_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_or_values_ = node;
    }
    public PLiteralSequence GetLiteralSequence ()
    {
        return _literal_sequence_;
    }

    public void SetLiteralSequence (PLiteralSequence node)
    {
        if(_literal_sequence_ != null)
        {
            _literal_sequence_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _literal_sequence_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number88_)
            + ToString (_data_name_)
            + ToString (_value_or_values_)
            + ToString (_literal_sequence_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number88_ == child )
        {
            _number88_ = null;
            return;
        }
        if ( _data_name_ == child )
        {
            _data_name_ = null;
            return;
        }
        if ( _value_or_values_ == child )
        {
            _value_or_values_ = null;
            return;
        }
        if ( _literal_sequence_ == child )
        {
            _literal_sequence_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number88_ == oldChild )
        {
            SetNumber88 ((TNumber88) newChild);
            return;
        }
        if ( _data_name_ == oldChild )
        {
            SetDataName ((TDataName) newChild);
            return;
        }
        if ( _value_or_values_ == oldChild )
        {
            SetValueOrValues ((PValueOrValues) newChild);
            return;
        }
        if ( _literal_sequence_ == oldChild )
        {
            SetLiteralSequence ((PLiteralSequence) newChild);
            return;
        }
    }

}
public sealed class AValueValueOrValues : PValueOrValues
{
    private TValue _value_;
    private TIs _is_;

    public AValueValueOrValues ()
    {
    }

    public AValueValueOrValues (
            TValue _value_,
            TIs _is_
    )
    {
        SetValue (_value_);
        SetIs (_is_);
    }

    public override Object Clone()
    {
        return new AValueValueOrValues (
            (TValue)CloneNode (_value_),
            (TIs)CloneNode (_is_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAValueValueOrValues(this);
    }

    public TValue GetValue ()
    {
        return _value_;
    }

    public void SetValue (TValue node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }
    public TIs GetIs ()
    {
        return _is_;
    }

    public void SetIs (TIs node)
    {
        if(_is_ != null)
        {
            _is_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _is_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_value_)
            + ToString (_is_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
        if ( _is_ == child )
        {
            _is_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _value_ == oldChild )
        {
            SetValue ((TValue) newChild);
            return;
        }
        if ( _is_ == oldChild )
        {
            SetIs ((TIs) newChild);
            return;
        }
    }

}
public sealed class AValuesValueOrValues : PValueOrValues
{
    private TValues _values_;
    private TAre _are_;

    public AValuesValueOrValues ()
    {
    }

    public AValuesValueOrValues (
            TValues _values_,
            TAre _are_
    )
    {
        SetValues (_values_);
        SetAre (_are_);
    }

    public override Object Clone()
    {
        return new AValuesValueOrValues (
            (TValues)CloneNode (_values_),
            (TAre)CloneNode (_are_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAValuesValueOrValues(this);
    }

    public TValues GetValues ()
    {
        return _values_;
    }

    public void SetValues (TValues node)
    {
        if(_values_ != null)
        {
            _values_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _values_ = node;
    }
    public TAre GetAre ()
    {
        return _are_;
    }

    public void SetAre (TAre node)
    {
        if(_are_ != null)
        {
            _are_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _are_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_values_)
            + ToString (_are_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _values_ == child )
        {
            _values_ = null;
            return;
        }
        if ( _are_ == child )
        {
            _are_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _values_ == oldChild )
        {
            SetValues ((TValues) newChild);
            return;
        }
        if ( _are_ == oldChild )
        {
            SetAre ((TAre) newChild);
            return;
        }
    }

}
public sealed class ASingleLiteralSequence : PLiteralSequence
{
    private TAll _all_;
    private PLiteral _literal_;

    public ASingleLiteralSequence ()
    {
    }

    public ASingleLiteralSequence (
            TAll _all_,
            PLiteral _literal_
    )
    {
        SetAll (_all_);
        SetLiteral (_literal_);
    }

    public override Object Clone()
    {
        return new ASingleLiteralSequence (
            (TAll)CloneNode (_all_),
            (PLiteral)CloneNode (_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleLiteralSequence(this);
    }

    public TAll GetAll ()
    {
        return _all_;
    }

    public void SetAll (TAll node)
    {
        if(_all_ != null)
        {
            _all_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _all_ = node;
    }
    public PLiteral GetLiteral ()
    {
        return _literal_;
    }

    public void SetLiteral (PLiteral node)
    {
        if(_literal_ != null)
        {
            _literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_all_)
            + ToString (_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _all_ == child )
        {
            _all_ = null;
            return;
        }
        if ( _literal_ == child )
        {
            _literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _all_ == oldChild )
        {
            SetAll ((TAll) newChild);
            return;
        }
        if ( _literal_ == oldChild )
        {
            SetLiteral ((PLiteral) newChild);
            return;
        }
    }

}
public sealed class ASequenceLiteralSequence : PLiteralSequence
{
    private PLiteralSequence _literal_sequence_;
    private TComma _comma_;
    private PLiteral _literal_;

    public ASequenceLiteralSequence ()
    {
    }

    public ASequenceLiteralSequence (
            PLiteralSequence _literal_sequence_,
            TComma _comma_,
            PLiteral _literal_
    )
    {
        SetLiteralSequence (_literal_sequence_);
        SetComma (_comma_);
        SetLiteral (_literal_);
    }

    public override Object Clone()
    {
        return new ASequenceLiteralSequence (
            (PLiteralSequence)CloneNode (_literal_sequence_),
            (TComma)CloneNode (_comma_),
            (PLiteral)CloneNode (_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASequenceLiteralSequence(this);
    }

    public PLiteralSequence GetLiteralSequence ()
    {
        return _literal_sequence_;
    }

    public void SetLiteralSequence (PLiteralSequence node)
    {
        if(_literal_sequence_ != null)
        {
            _literal_sequence_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _literal_sequence_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PLiteral GetLiteral ()
    {
        return _literal_;
    }

    public void SetLiteral (PLiteral node)
    {
        if(_literal_ != null)
        {
            _literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_literal_sequence_)
            + ToString (_comma_)
            + ToString (_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _literal_sequence_ == child )
        {
            _literal_sequence_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _literal_ == child )
        {
            _literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _literal_sequence_ == oldChild )
        {
            SetLiteralSequence ((PLiteralSequence) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _literal_ == oldChild )
        {
            SetLiteral ((PLiteral) newChild);
            return;
        }
    }

}
public sealed class AThroughSingleLiteralSequence : PLiteralSequence
{
    private PLiteral _from_;
    private TThrough _through_;
    private PLiteral _to_;

    public AThroughSingleLiteralSequence ()
    {
    }

    public AThroughSingleLiteralSequence (
            PLiteral _from_,
            TThrough _through_,
            PLiteral _to_
    )
    {
        SetFrom (_from_);
        SetThrough (_through_);
        SetTo (_to_);
    }

    public override Object Clone()
    {
        return new AThroughSingleLiteralSequence (
            (PLiteral)CloneNode (_from_),
            (TThrough)CloneNode (_through_),
            (PLiteral)CloneNode (_to_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThroughSingleLiteralSequence(this);
    }

    public PLiteral GetFrom ()
    {
        return _from_;
    }

    public void SetFrom (PLiteral node)
    {
        if(_from_ != null)
        {
            _from_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _from_ = node;
    }
    public TThrough GetThrough ()
    {
        return _through_;
    }

    public void SetThrough (TThrough node)
    {
        if(_through_ != null)
        {
            _through_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _through_ = node;
    }
    public PLiteral GetTo ()
    {
        return _to_;
    }

    public void SetTo (PLiteral node)
    {
        if(_to_ != null)
        {
            _to_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _to_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_from_)
            + ToString (_through_)
            + ToString (_to_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _from_ == child )
        {
            _from_ = null;
            return;
        }
        if ( _through_ == child )
        {
            _through_ = null;
            return;
        }
        if ( _to_ == child )
        {
            _to_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _from_ == oldChild )
        {
            SetFrom ((PLiteral) newChild);
            return;
        }
        if ( _through_ == oldChild )
        {
            SetThrough ((TThrough) newChild);
            return;
        }
        if ( _to_ == oldChild )
        {
            SetTo ((PLiteral) newChild);
            return;
        }
    }

}
public sealed class AThroughSequenceLiteralSequence : PLiteralSequence
{
    private PLiteralSequence _literal_sequence_;
    private TComma _comma_;
    private PLiteral _from_;
    private TThrough _through_;
    private PLiteral _to_;

    public AThroughSequenceLiteralSequence ()
    {
    }

    public AThroughSequenceLiteralSequence (
            PLiteralSequence _literal_sequence_,
            TComma _comma_,
            PLiteral _from_,
            TThrough _through_,
            PLiteral _to_
    )
    {
        SetLiteralSequence (_literal_sequence_);
        SetComma (_comma_);
        SetFrom (_from_);
        SetThrough (_through_);
        SetTo (_to_);
    }

    public override Object Clone()
    {
        return new AThroughSequenceLiteralSequence (
            (PLiteralSequence)CloneNode (_literal_sequence_),
            (TComma)CloneNode (_comma_),
            (PLiteral)CloneNode (_from_),
            (TThrough)CloneNode (_through_),
            (PLiteral)CloneNode (_to_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThroughSequenceLiteralSequence(this);
    }

    public PLiteralSequence GetLiteralSequence ()
    {
        return _literal_sequence_;
    }

    public void SetLiteralSequence (PLiteralSequence node)
    {
        if(_literal_sequence_ != null)
        {
            _literal_sequence_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _literal_sequence_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PLiteral GetFrom ()
    {
        return _from_;
    }

    public void SetFrom (PLiteral node)
    {
        if(_from_ != null)
        {
            _from_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _from_ = node;
    }
    public TThrough GetThrough ()
    {
        return _through_;
    }

    public void SetThrough (TThrough node)
    {
        if(_through_ != null)
        {
            _through_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _through_ = node;
    }
    public PLiteral GetTo ()
    {
        return _to_;
    }

    public void SetTo (PLiteral node)
    {
        if(_to_ != null)
        {
            _to_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _to_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_literal_sequence_)
            + ToString (_comma_)
            + ToString (_from_)
            + ToString (_through_)
            + ToString (_to_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _literal_sequence_ == child )
        {
            _literal_sequence_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _from_ == child )
        {
            _from_ = null;
            return;
        }
        if ( _through_ == child )
        {
            _through_ = null;
            return;
        }
        if ( _to_ == child )
        {
            _to_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _literal_sequence_ == oldChild )
        {
            SetLiteralSequence ((PLiteralSequence) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _from_ == oldChild )
        {
            SetFrom ((PLiteral) newChild);
            return;
        }
        if ( _through_ == oldChild )
        {
            SetThrough ((TThrough) newChild);
            return;
        }
        if ( _to_ == oldChild )
        {
            SetTo ((PLiteral) newChild);
            return;
        }
    }

}
public sealed class AZerosLiteral : PLiteral
{
    private TZeros _zeros_;

    public AZerosLiteral ()
    {
    }

    public AZerosLiteral (
            TZeros _zeros_
    )
    {
        SetZeros (_zeros_);
    }

    public override Object Clone()
    {
        return new AZerosLiteral (
            (TZeros)CloneNode (_zeros_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAZerosLiteral(this);
    }

    public TZeros GetZeros ()
    {
        return _zeros_;
    }

    public void SetZeros (TZeros node)
    {
        if(_zeros_ != null)
        {
            _zeros_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _zeros_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_zeros_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _zeros_ == child )
        {
            _zeros_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _zeros_ == oldChild )
        {
            SetZeros ((TZeros) newChild);
            return;
        }
    }

}
public sealed class ASpacesLiteral : PLiteral
{
    private TSpaces _spaces_;

    public ASpacesLiteral ()
    {
    }

    public ASpacesLiteral (
            TSpaces _spaces_
    )
    {
        SetSpaces (_spaces_);
    }

    public override Object Clone()
    {
        return new ASpacesLiteral (
            (TSpaces)CloneNode (_spaces_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASpacesLiteral(this);
    }

    public TSpaces GetSpaces ()
    {
        return _spaces_;
    }

    public void SetSpaces (TSpaces node)
    {
        if(_spaces_ != null)
        {
            _spaces_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _spaces_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_spaces_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _spaces_ == child )
        {
            _spaces_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _spaces_ == oldChild )
        {
            SetSpaces ((TSpaces) newChild);
            return;
        }
    }

}
public sealed class AHighValuesLiteral : PLiteral
{
    private THighValues _high_values_;

    public AHighValuesLiteral ()
    {
    }

    public AHighValuesLiteral (
            THighValues _high_values_
    )
    {
        SetHighValues (_high_values_);
    }

    public override Object Clone()
    {
        return new AHighValuesLiteral (
            (THighValues)CloneNode (_high_values_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAHighValuesLiteral(this);
    }

    public THighValues GetHighValues ()
    {
        return _high_values_;
    }

    public void SetHighValues (THighValues node)
    {
        if(_high_values_ != null)
        {
            _high_values_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _high_values_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_high_values_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _high_values_ == child )
        {
            _high_values_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _high_values_ == oldChild )
        {
            SetHighValues ((THighValues) newChild);
            return;
        }
    }

}
public sealed class ALowValuesLiteral : PLiteral
{
    private TLowValues _low_values_;

    public ALowValuesLiteral ()
    {
    }

    public ALowValuesLiteral (
            TLowValues _low_values_
    )
    {
        SetLowValues (_low_values_);
    }

    public override Object Clone()
    {
        return new ALowValuesLiteral (
            (TLowValues)CloneNode (_low_values_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALowValuesLiteral(this);
    }

    public TLowValues GetLowValues ()
    {
        return _low_values_;
    }

    public void SetLowValues (TLowValues node)
    {
        if(_low_values_ != null)
        {
            _low_values_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _low_values_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_low_values_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _low_values_ == child )
        {
            _low_values_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _low_values_ == oldChild )
        {
            SetLowValues ((TLowValues) newChild);
            return;
        }
    }

}
public sealed class AQuotesLiteral : PLiteral
{
    private TQuotes _quotes_;

    public AQuotesLiteral ()
    {
    }

    public AQuotesLiteral (
            TQuotes _quotes_
    )
    {
        SetQuotes (_quotes_);
    }

    public override Object Clone()
    {
        return new AQuotesLiteral (
            (TQuotes)CloneNode (_quotes_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAQuotesLiteral(this);
    }

    public TQuotes GetQuotes ()
    {
        return _quotes_;
    }

    public void SetQuotes (TQuotes node)
    {
        if(_quotes_ != null)
        {
            _quotes_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _quotes_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_quotes_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _quotes_ == child )
        {
            _quotes_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _quotes_ == oldChild )
        {
            SetQuotes ((TQuotes) newChild);
            return;
        }
    }

}
public sealed class ANullsLiteral : PLiteral
{
    private TNulls _nulls_;

    public ANullsLiteral ()
    {
    }

    public ANullsLiteral (
            TNulls _nulls_
    )
    {
        SetNulls (_nulls_);
    }

    public override Object Clone()
    {
        return new ANullsLiteral (
            (TNulls)CloneNode (_nulls_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANullsLiteral(this);
    }

    public TNulls GetNulls ()
    {
        return _nulls_;
    }

    public void SetNulls (TNulls node)
    {
        if(_nulls_ != null)
        {
            _nulls_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nulls_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_nulls_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _nulls_ == child )
        {
            _nulls_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _nulls_ == oldChild )
        {
            SetNulls ((TNulls) newChild);
            return;
        }
    }

}
public sealed class ANumberLiteral : PLiteral
{
    private PNumber _number_;

    public ANumberLiteral ()
    {
    }

    public ANumberLiteral (
            PNumber _number_
    )
    {
        SetNumber (_number_);
    }

    public override Object Clone()
    {
        return new ANumberLiteral (
            (PNumber)CloneNode (_number_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumberLiteral(this);
    }

    public PNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (PNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_ == oldChild )
        {
            SetNumber ((PNumber) newChild);
            return;
        }
    }

}
public sealed class ANumericLiteralLiteral : PLiteral
{
    private TNumericLiteral _numeric_literal_;

    public ANumericLiteralLiteral ()
    {
    }

    public ANumericLiteralLiteral (
            TNumericLiteral _numeric_literal_
    )
    {
        SetNumericLiteral (_numeric_literal_);
    }

    public override Object Clone()
    {
        return new ANumericLiteralLiteral (
            (TNumericLiteral)CloneNode (_numeric_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumericLiteralLiteral(this);
    }

    public TNumericLiteral GetNumericLiteral ()
    {
        return _numeric_literal_;
    }

    public void SetNumericLiteral (TNumericLiteral node)
    {
        if(_numeric_literal_ != null)
        {
            _numeric_literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _numeric_literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_numeric_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _numeric_literal_ == child )
        {
            _numeric_literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _numeric_literal_ == oldChild )
        {
            SetNumericLiteral ((TNumericLiteral) newChild);
            return;
        }
    }

}
public sealed class AAlphanumericLiteralLiteral : PLiteral
{
    private TAlphanumericLiteral _alphanumeric_literal_;

    public AAlphanumericLiteralLiteral ()
    {
    }

    public AAlphanumericLiteralLiteral (
            TAlphanumericLiteral _alphanumeric_literal_
    )
    {
        SetAlphanumericLiteral (_alphanumeric_literal_);
    }

    public override Object Clone()
    {
        return new AAlphanumericLiteralLiteral (
            (TAlphanumericLiteral)CloneNode (_alphanumeric_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAlphanumericLiteralLiteral(this);
    }

    public TAlphanumericLiteral GetAlphanumericLiteral ()
    {
        return _alphanumeric_literal_;
    }

    public void SetAlphanumericLiteral (TAlphanumericLiteral node)
    {
        if(_alphanumeric_literal_ != null)
        {
            _alphanumeric_literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _alphanumeric_literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_alphanumeric_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _alphanumeric_literal_ == child )
        {
            _alphanumeric_literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _alphanumeric_literal_ == oldChild )
        {
            SetAlphanumericLiteral ((TAlphanumericLiteral) newChild);
            return;
        }
    }

}
public sealed class ASingleCharacterString : PCharacterString
{
    private PCharacterSubstring _character_substring_;

    public ASingleCharacterString ()
    {
    }

    public ASingleCharacterString (
            PCharacterSubstring _character_substring_
    )
    {
        SetCharacterSubstring (_character_substring_);
    }

    public override Object Clone()
    {
        return new ASingleCharacterString (
            (PCharacterSubstring)CloneNode (_character_substring_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleCharacterString(this);
    }

    public PCharacterSubstring GetCharacterSubstring ()
    {
        return _character_substring_;
    }

    public void SetCharacterSubstring (PCharacterSubstring node)
    {
        if(_character_substring_ != null)
        {
            _character_substring_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _character_substring_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_character_substring_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _character_substring_ == child )
        {
            _character_substring_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _character_substring_ == oldChild )
        {
            SetCharacterSubstring ((PCharacterSubstring) newChild);
            return;
        }
    }

}
public sealed class ASequenceCharacterString : PCharacterString
{
    private PCharacterString _character_string_;
    private PCharacterSubstring _character_substring_;

    public ASequenceCharacterString ()
    {
    }

    public ASequenceCharacterString (
            PCharacterString _character_string_,
            PCharacterSubstring _character_substring_
    )
    {
        SetCharacterString (_character_string_);
        SetCharacterSubstring (_character_substring_);
    }

    public override Object Clone()
    {
        return new ASequenceCharacterString (
            (PCharacterString)CloneNode (_character_string_),
            (PCharacterSubstring)CloneNode (_character_substring_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASequenceCharacterString(this);
    }

    public PCharacterString GetCharacterString ()
    {
        return _character_string_;
    }

    public void SetCharacterString (PCharacterString node)
    {
        if(_character_string_ != null)
        {
            _character_string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _character_string_ = node;
    }
    public PCharacterSubstring GetCharacterSubstring ()
    {
        return _character_substring_;
    }

    public void SetCharacterSubstring (PCharacterSubstring node)
    {
        if(_character_substring_ != null)
        {
            _character_substring_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _character_substring_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_character_string_)
            + ToString (_character_substring_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _character_string_ == child )
        {
            _character_string_ = null;
            return;
        }
        if ( _character_substring_ == child )
        {
            _character_substring_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _character_string_ == oldChild )
        {
            SetCharacterString ((PCharacterString) newChild);
            return;
        }
        if ( _character_substring_ == oldChild )
        {
            SetCharacterSubstring ((PCharacterSubstring) newChild);
            return;
        }
    }

}
public sealed class ADataNameCharacterSubstring : PCharacterSubstring
{
    private TDataName _data_name_;

    public ADataNameCharacterSubstring ()
    {
    }

    public ADataNameCharacterSubstring (
            TDataName _data_name_
    )
    {
        SetDataName (_data_name_);
    }

    public override Object Clone()
    {
        return new ADataNameCharacterSubstring (
            (TDataName)CloneNode (_data_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADataNameCharacterSubstring(this);
    }

    public TDataName GetDataName ()
    {
        return _data_name_;
    }

    public void SetDataName (TDataName node)
    {
        if(_data_name_ != null)
        {
            _data_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _data_name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_data_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _data_name_ == child )
        {
            _data_name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _data_name_ == oldChild )
        {
            SetDataName ((TDataName) newChild);
            return;
        }
    }

}
public sealed class APlusCharacterSubstring : PCharacterSubstring
{
    private TPlus _plus_;

    public APlusCharacterSubstring ()
    {
    }

    public APlusCharacterSubstring (
            TPlus _plus_
    )
    {
        SetPlus (_plus_);
    }

    public override Object Clone()
    {
        return new APlusCharacterSubstring (
            (TPlus)CloneNode (_plus_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusCharacterSubstring(this);
    }

    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_plus_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
    }

}
public sealed class AMinusCharacterSubstring : PCharacterSubstring
{
    private TMinus _minus_;

    public AMinusCharacterSubstring ()
    {
    }

    public AMinusCharacterSubstring (
            TMinus _minus_
    )
    {
        SetMinus (_minus_);
    }

    public override Object Clone()
    {
        return new AMinusCharacterSubstring (
            (TMinus)CloneNode (_minus_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMinusCharacterSubstring(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
    }

}
public sealed class AStarCharacterSubstring : PCharacterSubstring
{
    private TStar _star_;

    public AStarCharacterSubstring ()
    {
    }

    public AStarCharacterSubstring (
            TStar _star_
    )
    {
        SetStar (_star_);
    }

    public override Object Clone()
    {
        return new AStarCharacterSubstring (
            (TStar)CloneNode (_star_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStarCharacterSubstring(this);
    }

    public TStar GetStar ()
    {
        return _star_;
    }

    public void SetStar (TStar node)
    {
        if(_star_ != null)
        {
            _star_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _star_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_star_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _star_ == child )
        {
            _star_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _star_ == oldChild )
        {
            SetStar ((TStar) newChild);
            return;
        }
    }

}
public sealed class ASlashCharacterSubstring : PCharacterSubstring
{
    private TSlash _slash_;

    public ASlashCharacterSubstring ()
    {
    }

    public ASlashCharacterSubstring (
            TSlash _slash_
    )
    {
        SetSlash (_slash_);
    }

    public override Object Clone()
    {
        return new ASlashCharacterSubstring (
            (TSlash)CloneNode (_slash_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASlashCharacterSubstring(this);
    }

    public TSlash GetSlash ()
    {
        return _slash_;
    }

    public void SetSlash (TSlash node)
    {
        if(_slash_ != null)
        {
            _slash_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _slash_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_slash_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _slash_ == child )
        {
            _slash_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _slash_ == oldChild )
        {
            SetSlash ((TSlash) newChild);
            return;
        }
    }

}
public sealed class ADollarCharacterSubstring : PCharacterSubstring
{
    private TDollar _dollar_;

    public ADollarCharacterSubstring ()
    {
    }

    public ADollarCharacterSubstring (
            TDollar _dollar_
    )
    {
        SetDollar (_dollar_);
    }

    public override Object Clone()
    {
        return new ADollarCharacterSubstring (
            (TDollar)CloneNode (_dollar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADollarCharacterSubstring(this);
    }

    public TDollar GetDollar ()
    {
        return _dollar_;
    }

    public void SetDollar (TDollar node)
    {
        if(_dollar_ != null)
        {
            _dollar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dollar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_dollar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _dollar_ == child )
        {
            _dollar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _dollar_ == oldChild )
        {
            SetDollar ((TDollar) newChild);
            return;
        }
    }

}
public sealed class ACommaCharacterSubstring : PCharacterSubstring
{
    private TComma _comma_;

    public ACommaCharacterSubstring ()
    {
    }

    public ACommaCharacterSubstring (
            TComma _comma_
    )
    {
        SetComma (_comma_);
    }

    public override Object Clone()
    {
        return new ACommaCharacterSubstring (
            (TComma)CloneNode (_comma_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACommaCharacterSubstring(this);
    }

    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comma_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
    }

}
public sealed class ANumberCharacterSubstring : PCharacterSubstring
{
    private TNumberNot88 _number_not88_;

    public ANumberCharacterSubstring ()
    {
    }

    public ANumberCharacterSubstring (
            TNumberNot88 _number_not88_
    )
    {
        SetNumberNot88 (_number_not88_);
    }

    public override Object Clone()
    {
        return new ANumberCharacterSubstring (
            (TNumberNot88)CloneNode (_number_not88_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumberCharacterSubstring(this);
    }

    public TNumberNot88 GetNumberNot88 ()
    {
        return _number_not88_;
    }

    public void SetNumberNot88 (TNumberNot88 node)
    {
        if(_number_not88_ != null)
        {
            _number_not88_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_not88_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_not88_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_not88_ == child )
        {
            _number_not88_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_not88_ == oldChild )
        {
            SetNumberNot88 ((TNumberNot88) newChild);
            return;
        }
    }

}
public sealed class ANumericLiteralCharacterSubstring : PCharacterSubstring
{
    private TNumericLiteral _numeric_literal_;

    public ANumericLiteralCharacterSubstring ()
    {
    }

    public ANumericLiteralCharacterSubstring (
            TNumericLiteral _numeric_literal_
    )
    {
        SetNumericLiteral (_numeric_literal_);
    }

    public override Object Clone()
    {
        return new ANumericLiteralCharacterSubstring (
            (TNumericLiteral)CloneNode (_numeric_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumericLiteralCharacterSubstring(this);
    }

    public TNumericLiteral GetNumericLiteral ()
    {
        return _numeric_literal_;
    }

    public void SetNumericLiteral (TNumericLiteral node)
    {
        if(_numeric_literal_ != null)
        {
            _numeric_literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _numeric_literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_numeric_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _numeric_literal_ == child )
        {
            _numeric_literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _numeric_literal_ == oldChild )
        {
            SetNumericLiteral ((TNumericLiteral) newChild);
            return;
        }
    }

}
public sealed class ABracketedNumberCharacterSubstring : PCharacterSubstring
{
    private PBracketedNumber _bracketed_number_;

    public ABracketedNumberCharacterSubstring ()
    {
    }

    public ABracketedNumberCharacterSubstring (
            PBracketedNumber _bracketed_number_
    )
    {
        SetBracketedNumber (_bracketed_number_);
    }

    public override Object Clone()
    {
        return new ABracketedNumberCharacterSubstring (
            (PBracketedNumber)CloneNode (_bracketed_number_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABracketedNumberCharacterSubstring(this);
    }

    public PBracketedNumber GetBracketedNumber ()
    {
        return _bracketed_number_;
    }

    public void SetBracketedNumber (PBracketedNumber node)
    {
        if(_bracketed_number_ != null)
        {
            _bracketed_number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bracketed_number_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bracketed_number_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bracketed_number_ == child )
        {
            _bracketed_number_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bracketed_number_ == oldChild )
        {
            SetBracketedNumber ((PBracketedNumber) newChild);
            return;
        }
    }

}
public sealed class ADotZeeCharacterSubstring : PCharacterSubstring
{
    private TDotZee _dot_zee_;

    public ADotZeeCharacterSubstring ()
    {
    }

    public ADotZeeCharacterSubstring (
            TDotZee _dot_zee_
    )
    {
        SetDotZee (_dot_zee_);
    }

    public override Object Clone()
    {
        return new ADotZeeCharacterSubstring (
            (TDotZee)CloneNode (_dot_zee_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADotZeeCharacterSubstring(this);
    }

    public TDotZee GetDotZee ()
    {
        return _dot_zee_;
    }

    public void SetDotZee (TDotZee node)
    {
        if(_dot_zee_ != null)
        {
            _dot_zee_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dot_zee_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_dot_zee_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _dot_zee_ == child )
        {
            _dot_zee_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _dot_zee_ == oldChild )
        {
            SetDotZee ((TDotZee) newChild);
            return;
        }
    }

}
public sealed class ABracketedNumber : PBracketedNumber
{
    private TLparen _lparen_;
    private PNumber _number_;
    private TRparen _rparen_;

    public ABracketedNumber ()
    {
    }

    public ABracketedNumber (
            TLparen _lparen_,
            PNumber _number_,
            TRparen _rparen_
    )
    {
        SetLparen (_lparen_);
        SetNumber (_number_);
        SetRparen (_rparen_);
    }

    public override Object Clone()
    {
        return new ABracketedNumber (
            (TLparen)CloneNode (_lparen_),
            (PNumber)CloneNode (_number_),
            (TRparen)CloneNode (_rparen_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABracketedNumber(this);
    }

    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (PNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lparen_)
            + ToString (_number_)
            + ToString (_rparen_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _number_ == oldChild )
        {
            SetNumber ((PNumber) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
    }

}
public sealed class ANumberNot88Number : PNumber
{
    private TNumberNot88 _number_not88_;

    public ANumberNot88Number ()
    {
    }

    public ANumberNot88Number (
            TNumberNot88 _number_not88_
    )
    {
        SetNumberNot88 (_number_not88_);
    }

    public override Object Clone()
    {
        return new ANumberNot88Number (
            (TNumberNot88)CloneNode (_number_not88_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumberNot88Number(this);
    }

    public TNumberNot88 GetNumberNot88 ()
    {
        return _number_not88_;
    }

    public void SetNumberNot88 (TNumberNot88 node)
    {
        if(_number_not88_ != null)
        {
            _number_not88_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_not88_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_not88_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_not88_ == child )
        {
            _number_not88_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_not88_ == oldChild )
        {
            SetNumberNot88 ((TNumberNot88) newChild);
            return;
        }
    }

}
public sealed class ANumber88Number : PNumber
{
    private TNumber88 _number88_;

    public ANumber88Number ()
    {
    }

    public ANumber88Number (
            TNumber88 _number88_
    )
    {
        SetNumber88 (_number88_);
    }

    public override Object Clone()
    {
        return new ANumber88Number (
            (TNumber88)CloneNode (_number88_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumber88Number(this);
    }

    public TNumber88 GetNumber88 ()
    {
        return _number88_;
    }

    public void SetNumber88 (TNumber88 node)
    {
        if(_number88_ != null)
        {
            _number88_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number88_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number88_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number88_ == child )
        {
            _number88_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number88_ == oldChild )
        {
            SetNumber88 ((TNumber88) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PRecordDescription _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PRecordDescription _base_,
        EOF _eof_)
    {
        SetPRecordDescription(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PRecordDescription) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PRecordDescription GetPRecordDescription()
    {
        return _base_;
    }
    public void SetPRecordDescription(PRecordDescription node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPRecordDescription((PRecordDescription) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
