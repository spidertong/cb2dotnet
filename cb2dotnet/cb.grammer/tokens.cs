/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  net.sf.cb2xml.sablecc.analysis;

namespace net.sf.cb2xml.sablecc.node {


public sealed class TWhiteSpace : Token
{
    public TWhiteSpace(string text)
    {
        Text = text;
    }

    public TWhiteSpace(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TWhiteSpace(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTWhiteSpace(this);
    }
}

public sealed class TComment : Token
{
    public TComment(string text)
    {
        Text = text;
    }

    public TComment(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TComment(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTComment(this);
    }
}

public sealed class TDot : Token
{
    public TDot(string text)
    {
        Text = text;
    }

    public TDot(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDot(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDot(this);
    }
}

public sealed class TComma : Token
{
    public TComma(string text)
    {
        Text = text;
    }

    public TComma(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TComma(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTComma(this);
    }
}

public sealed class TSlash : Token
{
    public TSlash(string text)
    {
        Text = text;
    }

    public TSlash(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TSlash(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTSlash(this);
    }
}

public sealed class TPlus : Token
{
    public TPlus(string text)
    {
        Text = text;
    }

    public TPlus(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TPlus(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTPlus(this);
    }
}

public sealed class TMinus : Token
{
    public TMinus(string text)
    {
        Text = text;
    }

    public TMinus(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TMinus(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTMinus(this);
    }
}

public sealed class TStar : Token
{
    public TStar(string text)
    {
        Text = text;
    }

    public TStar(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TStar(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTStar(this);
    }
}

public sealed class TDollar : Token
{
    public TDollar(string text)
    {
        Text = text;
    }

    public TDollar(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDollar(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDollar(this);
    }
}

public sealed class TLparen : Token
{
    public TLparen(string text)
    {
        Text = text;
    }

    public TLparen(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TLparen(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTLparen(this);
    }
}

public sealed class TRparen : Token
{
    public TRparen(string text)
    {
        Text = text;
    }

    public TRparen(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRparen(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRparen(this);
    }
}

public sealed class TNumber88 : Token
{
    public TNumber88(string text)
    {
        Text = text;
    }

    public TNumber88(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TNumber88(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTNumber88(this);
    }
}

public sealed class TNumberNot88 : Token
{
    public TNumberNot88(string text)
    {
        Text = text;
    }

    public TNumberNot88(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TNumberNot88(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTNumberNot88(this);
    }
}

public sealed class TAlphanumericLiteral : Token
{
    public TAlphanumericLiteral(string text)
    {
        Text = text;
    }

    public TAlphanumericLiteral(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TAlphanumericLiteral(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTAlphanumericLiteral(this);
    }
}

public sealed class TNumericLiteral : Token
{
    public TNumericLiteral(string text)
    {
        Text = text;
    }

    public TNumericLiteral(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TNumericLiteral(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTNumericLiteral(this);
    }
}

public sealed class TDotZee : Token
{
    public TDotZee(string text)
    {
        Text = text;
    }

    public TDotZee(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDotZee(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDotZee(this);
    }
}

public sealed class TAll : Token
{
    public TAll(string text)
    {
        Text = text;
    }

    public TAll(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TAll(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTAll(this);
    }
}

public sealed class TAre : Token
{
    public TAre(string text)
    {
        Text = text;
    }

    public TAre(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TAre(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTAre(this);
    }
}

public sealed class TAscending : Token
{
    public TAscending(string text)
    {
        Text = text;
    }

    public TAscending(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TAscending(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTAscending(this);
    }
}

public sealed class TBinary : Token
{
    public TBinary(string text)
    {
        Text = text;
    }

    public TBinary(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBinary(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBinary(this);
    }
}

public sealed class TBlank : Token
{
    public TBlank(string text)
    {
        Text = text;
    }

    public TBlank(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBlank(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBlank(this);
    }
}

public sealed class TBy : Token
{
    public TBy(string text)
    {
        Text = text;
    }

    public TBy(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBy(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBy(this);
    }
}

public sealed class TCharacter : Token
{
    public TCharacter(string text)
    {
        Text = text;
    }

    public TCharacter(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TCharacter(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTCharacter(this);
    }
}

public sealed class TComp : Token
{
    public TComp(string text)
    {
        Text = text;
    }

    public TComp(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TComp(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTComp(this);
    }
}

public sealed class TComp1 : Token
{
    public TComp1(string text)
    {
        Text = text;
    }

    public TComp1(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TComp1(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTComp1(this);
    }
}

public sealed class TComp2 : Token
{
    public TComp2(string text)
    {
        Text = text;
    }

    public TComp2(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TComp2(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTComp2(this);
    }
}

public sealed class TComp3 : Token
{
    public TComp3(string text)
    {
        Text = text;
    }

    public TComp3(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TComp3(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTComp3(this);
    }
}

public sealed class TComp4 : Token
{
    public TComp4(string text)
    {
        Text = text;
    }

    public TComp4(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TComp4(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTComp4(this);
    }
}

public sealed class TComp5 : Token
{
    public TComp5(string text)
    {
        Text = text;
    }

    public TComp5(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TComp5(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTComp5(this);
    }
}

public sealed class TDate : Token
{
    public TDate(string text)
    {
        Text = text;
    }

    public TDate(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDate(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDate(this);
    }
}

public sealed class TDepending : Token
{
    public TDepending(string text)
    {
        Text = text;
    }

    public TDepending(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDepending(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDepending(this);
    }
}

public sealed class TDescending : Token
{
    public TDescending(string text)
    {
        Text = text;
    }

    public TDescending(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDescending(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDescending(this);
    }
}

public sealed class TDisplay : Token
{
    public TDisplay(string text)
    {
        Text = text;
    }

    public TDisplay(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDisplay(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDisplay(this);
    }
}

public sealed class TDisplay1 : Token
{
    public TDisplay1(string text)
    {
        Text = text;
    }

    public TDisplay1(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDisplay1(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDisplay1(this);
    }
}

public sealed class TExternal : Token
{
    public TExternal(string text)
    {
        Text = text;
    }

    public TExternal(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TExternal(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTExternal(this);
    }
}

public sealed class TFiller : Token
{
    public TFiller(string text)
    {
        Text = text;
    }

    public TFiller(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TFiller(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTFiller(this);
    }
}

public sealed class TFormat : Token
{
    public TFormat(string text)
    {
        Text = text;
    }

    public TFormat(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TFormat(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTFormat(this);
    }
}

public sealed class TFunctionPointer : Token
{
    public TFunctionPointer(string text)
    {
        Text = text;
    }

    public TFunctionPointer(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TFunctionPointer(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTFunctionPointer(this);
    }
}

public sealed class TGlobal : Token
{
    public TGlobal(string text)
    {
        Text = text;
    }

    public TGlobal(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TGlobal(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTGlobal(this);
    }
}

public sealed class THighValues : Token
{
    public THighValues(string text)
    {
        Text = text;
    }

    public THighValues(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new THighValues(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTHighValues(this);
    }
}

public sealed class TIndex : Token
{
    public TIndex(string text)
    {
        Text = text;
    }

    public TIndex(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TIndex(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTIndex(this);
    }
}

public sealed class TIndexed : Token
{
    public TIndexed(string text)
    {
        Text = text;
    }

    public TIndexed(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TIndexed(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTIndexed(this);
    }
}

public sealed class TIs : Token
{
    public TIs(string text)
    {
        Text = text;
    }

    public TIs(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TIs(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTIs(this);
    }
}

public sealed class TJustified : Token
{
    public TJustified(string text)
    {
        Text = text;
    }

    public TJustified(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TJustified(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTJustified(this);
    }
}

public sealed class TKey : Token
{
    public TKey(string text)
    {
        Text = text;
    }

    public TKey(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKey(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKey(this);
    }
}

public sealed class TLeading : Token
{
    public TLeading(string text)
    {
        Text = text;
    }

    public TLeading(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TLeading(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTLeading(this);
    }
}

public sealed class TLeft : Token
{
    public TLeft(string text)
    {
        Text = text;
    }

    public TLeft(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TLeft(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTLeft(this);
    }
}

public sealed class TLowValues : Token
{
    public TLowValues(string text)
    {
        Text = text;
    }

    public TLowValues(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TLowValues(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTLowValues(this);
    }
}

public sealed class TNational : Token
{
    public TNational(string text)
    {
        Text = text;
    }

    public TNational(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TNational(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTNational(this);
    }
}

public sealed class TNative : Token
{
    public TNative(string text)
    {
        Text = text;
    }

    public TNative(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TNative(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTNative(this);
    }
}

public sealed class TNulls : Token
{
    public TNulls(string text)
    {
        Text = text;
    }

    public TNulls(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TNulls(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTNulls(this);
    }
}

public sealed class TObject : Token
{
    public TObject(string text)
    {
        Text = text;
    }

    public TObject(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TObject(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTObject(this);
    }
}

public sealed class TOccurs : Token
{
    public TOccurs(string text)
    {
        Text = text;
    }

    public TOccurs(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOccurs(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOccurs(this);
    }
}

public sealed class TOn : Token
{
    public TOn(string text)
    {
        Text = text;
    }

    public TOn(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOn(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOn(this);
    }
}

public sealed class TPackedDecimal : Token
{
    public TPackedDecimal(string text)
    {
        Text = text;
    }

    public TPackedDecimal(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TPackedDecimal(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTPackedDecimal(this);
    }
}

public sealed class TPicture : Token
{
    public TPicture(string text)
    {
        Text = text;
    }

    public TPicture(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TPicture(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTPicture(this);
    }
}

public sealed class TPointer : Token
{
    public TPointer(string text)
    {
        Text = text;
    }

    public TPointer(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TPointer(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTPointer(this);
    }
}

public sealed class TProcedurePointer : Token
{
    public TProcedurePointer(string text)
    {
        Text = text;
    }

    public TProcedurePointer(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TProcedurePointer(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTProcedurePointer(this);
    }
}

public sealed class TQuotes : Token
{
    public TQuotes(string text)
    {
        Text = text;
    }

    public TQuotes(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TQuotes(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTQuotes(this);
    }
}

public sealed class TRedefines : Token
{
    public TRedefines(string text)
    {
        Text = text;
    }

    public TRedefines(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRedefines(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRedefines(this);
    }
}

public sealed class TReference : Token
{
    public TReference(string text)
    {
        Text = text;
    }

    public TReference(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TReference(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTReference(this);
    }
}

public sealed class TRenames : Token
{
    public TRenames(string text)
    {
        Text = text;
    }

    public TRenames(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRenames(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRenames(this);
    }
}

public sealed class TRight : Token
{
    public TRight(string text)
    {
        Text = text;
    }

    public TRight(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRight(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRight(this);
    }
}

public sealed class TSeparate : Token
{
    public TSeparate(string text)
    {
        Text = text;
    }

    public TSeparate(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TSeparate(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTSeparate(this);
    }
}

public sealed class TSign : Token
{
    public TSign(string text)
    {
        Text = text;
    }

    public TSign(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TSign(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTSign(this);
    }
}

public sealed class TSpaces : Token
{
    public TSpaces(string text)
    {
        Text = text;
    }

    public TSpaces(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TSpaces(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTSpaces(this);
    }
}

public sealed class TSynchronized : Token
{
    public TSynchronized(string text)
    {
        Text = text;
    }

    public TSynchronized(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TSynchronized(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTSynchronized(this);
    }
}

public sealed class TThrough : Token
{
    public TThrough(string text)
    {
        Text = text;
    }

    public TThrough(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TThrough(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTThrough(this);
    }
}

public sealed class TTimes : Token
{
    public TTimes(string text)
    {
        Text = text;
    }

    public TTimes(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTimes(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTimes(this);
    }
}

public sealed class TTo : Token
{
    public TTo(string text)
    {
        Text = text;
    }

    public TTo(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTo(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTo(this);
    }
}

public sealed class TTrailing : Token
{
    public TTrailing(string text)
    {
        Text = text;
    }

    public TTrailing(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTrailing(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTrailing(this);
    }
}

public sealed class TUsage : Token
{
    public TUsage(string text)
    {
        Text = text;
    }

    public TUsage(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TUsage(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTUsage(this);
    }
}

public sealed class TValue : Token
{
    public TValue(string text)
    {
        Text = text;
    }

    public TValue(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TValue(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTValue(this);
    }
}

public sealed class TValues : Token
{
    public TValues(string text)
    {
        Text = text;
    }

    public TValues(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TValues(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTValues(this);
    }
}

public sealed class TWhen : Token
{
    public TWhen(string text)
    {
        Text = text;
    }

    public TWhen(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TWhen(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTWhen(this);
    }
}

public sealed class TZeros : Token
{
    public TZeros(string text)
    {
        Text = text;
    }

    public TZeros(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TZeros(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTZeros(this);
    }
}

public sealed class TDataName : Token
{
    public TDataName(string text)
    {
        Text = text;
    }

    public TDataName(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDataName(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDataName(this);
    }
}

public sealed class TUnknown : Token
{
    public TUnknown(string text)
    {
        Text = text;
    }

    public TUnknown(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TUnknown(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTUnknown(this);
    }
}


public abstract class Token : Node
{
    private string text;
    private int line;
    private int pos;

    public virtual string Text
    {
      get { return text; }
      set { text = value; }
    }

    public int Line
    {
      get { return line; }
      set { line = value; }
    }

    public int Pos
    {
      get { return pos; }
      set { pos = value; }
    }

    public override string ToString()
    {
        return text + " ";
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }
}

public sealed class EOF : Token
{
    public EOF()
    {
        Text = "";
    }

    public EOF(int line, int pos)
    {
        Text = "";
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
        return new EOF(Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseEOF(this);
    }
}
}
